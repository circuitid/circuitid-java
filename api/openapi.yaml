openapi: 3.1.0
info:
  contact:
    email: support@circuitid.com
    url: https://www.circuitid.com/
  description: "# Introduction\nCircuit ID&reg; is an innovative cloud communications\
    \ platform that redefines your connectivity experience. Our cutting-edge AI-powered\
    \ solution seamlessly integrates calling, meetings, messaging, voicemail, fax,\
    \ SIP Trunking, mobile broadband, and mobile phone services, accessible wherever\
    \ you and your devices go.\n                \nWhether you are a beginner getting\
    \ started with our API or an experienced developer looking for advanced features,\
    \ this documentation site will serve as your comprehensive guide. \n\nWe are excited\
    \ to have you on board and are confident that this documentation site will empower\
    \ you to leverage the full potential of our REST API.  If you have any questions\
    \ or require further assistance, please don't hesitate to reach out to our support\
    \ team.\n                \nHappy coding!"
  termsOfService: https://www.circuitid.com/legal/legal-msa.htm
  title: Circuit ID REST API
  version: 0.47.17
  x-logo:
    url: https://cdn.circuitid.com/images/logos/circuitid-logo.png
servers:
- description: Production
  url: https://cloud9.circuitid.com
security:
- jwt: []
tags:
- description: "The Authentication services creates and returns a JWT that can be\
    \ used for short-term access to the API endpoints.  To create long-term tokens\
    \ one (1) year or greater, create a <a href='#tag/User-Tokens/operation/createUserToken'>User\
    \ Token (/usertokens)</a> via the API or in the <a href='https://console.circuitid.com/'\
    \ target='_blank'>Online Portal.</a><br><br>Long-term tokens are recommended for\
    \ server applications."
  name: Authentication
- description: Accepted Senders represent authorized users who have the privilege
    to send Faxes and/or SMS messages. These designated individuals or entities are
    granted the necessary permissions to initiate communication through the system's
    functionalities.
  name: Accepted Senders
- description: Announcements are pre-recorded or text-to-speech messages that plays
    during various interactions within the system.
  name: Announcements
- description: "The App Marketplace offers a curated collection of applications developed\
    \ by various software creators and companies. Users can browse, discover, and\
    \ install these applications, tailored to their specific needs and interests."
  name: App Marketplace
- description: "Contacts are records that stores information about an individual or\
    \ entity within the system's database.  Also, contacts are used with other services\
    \ to identify individuals or entities."
  name: Contacts
- description: Call Queues are a powerful set of functionalities for managing and
    organizing incoming calls in a systematic and efficient manner.
  name: Call Queues
- description: Call Queue Agents handle calls within specific call queues.
  name: Call Queue Agents
- description: Chat Rooms are virtual spaces or channels where multiple users can
    engage in real-time text-based communication.
  name: Chat Rooms
- description: "VoIP phones, or IP phones, enable voice calls over the internet through\
    \ VoIP technology. When clients are added to the system, the phones can automatically\
    \ provision themselves, simplifying setup and configuration processes."
  name: Clients
- description: "Conversations allow users to send and receive SMS/MMS messages in\
    \ real-time, facilitating communication between individuals, businesses, or groups."
  name: Conversations
- description: Conversation Messages refer to the real-time individual units of communication
    exchanged within a conversation.
  name: Conversation Messages
- description: "Online conference rooms are a virtual spaces where participants can\
    \ collaborate and communicate in real-time through audio, video, screen share\
    \ and chat-based interactions."
  name: Conference Rooms
- description: Dial-in conference numbers are dedicated phone numbers provided so
    that participants can use to join conference calls.
  name: Conference Numbers
- description: Customers represents individual customers or clients within the system.
  name: Customers
- description: A collection of applications developed by various software creators
    and companies that are available to customers in the App Marketplace.
  name: Developer Apps
- description: Customer Subscription's to Developer Apps in the App Marketplace. This
    allows customers to gain access to and utilize the features and functionalities
    provided by these apps.
  name: Developer App Subscriptions
- description: Directories are AI-powered automated phone system features that assist
    callers in locating and connecting with a specific individual within an organization
    through voice commands or extension dialing.
  name: Directories
- description: "Verified domains provide domain-based authentication for a range of\
    \ services within the system. One practical application is in authorizing accepted\
    \ senders based on the domain from which an email is sent. By validating the domain's\
    \ authenticity, the system ensures that only authorized senders can interact with\
    \ the services, enhancing security and preventing unauthorized access."
  name: Domains
- description: DNS records are used to verify domains.
  name: DNS Records
- description: Faxes allows users to send and receive faxes using the internet instead
    of traditional fax machines and phone lines.
  name: Faxes
- description: "Fax accounts are designed to facilitate the sending and receiving\
    \ of faxes, encompassing all the necessary settings for fax-related activities.\
    \ These accounts serve as a centralized platform where users can configure their\
    \ fax preferences and to manage contact information."
  name: Fax Accounts
- description: "The Find Numbers service provides users with the ability to search\
    \ for various types of phone numbers, including local, international, toll-free,\
    \ and SMS/MMS numbers. Through this service, users can easily discover and obtain\
    \ phone numbers that suit their specific needs, whether it's for local communication,\
    \ international connections, toll-free services, or messaging capabilities."
  name: Find Numbers
- description: "A firewall designed to block unwanted traffic from phone calls, SMS/MMS\
    \ messages, and outbound calls that offers robust filtering and control capabilities.\
    \ This firewall acts as a protective barrier between the system and external sources,\
    \ enabling users to define rules and criteria for filtering incoming and outgoing\
    \ communication."
  name: Firewall
- description: "Groups are used for the purpose of managing access rights, permissions,\
    \ and settings for a defined set of users, devices and/or IP addresses."
  name: Groups
- description: "Group members are users, devices and/or IP addresses that who belong\
    \ to a specific user group. These members share common attributes, roles, and/or\
    \ permissions assigned to the user group."
  name: Group Members
- description: "Holidays are specific dates and times that designate non-working periods\
    \ within the system. They serve as indicators that a business or individual is\
    \ unavailable during these times. For instance, holidays can be set up to automatically\
    \ route calls to an after-hours auto attendant, ensuring proper handling of incoming\
    \ calls during non-operational hours."
  name: Holidays
- description: "The API information endpoint offers a comprehensive range of data\
    \ that enables seamless interaction with the service. This endpoint serves as\
    \ a valuable resource, providing developers with essential information to effectively\
    \ utilize and integrate their applications or systems with the API."
  name: Info
- description: "Invoice items are individual line items or entries listed on an invoice,\
    \ representing the goods, products, or services provided."
  name: Invoice Items
- description: "Invoices serves as a record of a transaction and includes details\
    \ such as the seller's and buyer's names and addresses, invoice number, date of\
    \ issue, payments, and payment terms."
  name: Invoices
- description: "Licenses are used to apply subscriptions to users, services, or devices\
    \ within the system. By assigning licenses, administrators can enable access to\
    \ specific features or functionalities for individual users or devices, controlling\
    \ their permissions and capabilities within the system. This allows for a flexible\
    \ and customizable approach to managing subscriptions and access levels based\
    \ on user roles and requirements."
  name: Licenses
- description: "A menu, or auto attendant, is an automated virtual receptionist system\
    \ that handles incoming calls, provides callers with pre-recorded greetings and\
    \ menu options, and routes calls to the appropriate extension or department without\
    \ the need for human intervention. It allows businesses to manage call flows efficiently,\
    \ improve customer service, and streamline communications by automating call handling\
    \ processes."
  name: Menus
- description: Menu options are pre-defined selections presented to callers when they
    interact with a a menu (automated virtual receptionist system).
  name: Menu Options
- description: A campaign serves as a scenario for sending A2P (Application-to-Person)
    SMS/MMS messages. You can register a campaign to send outbound SMS/MMS messages.
  name: Message Campaigns
- description: A 10DLC Message Brand refers to a business or individual entity responsible
    for sending SMS/MMS messages. Sending SMS/MMS messages necessitates having a registered
    10DLC Message Brand.
  name: Message Brands
- description: "Phone numbers are telephone numbers associated with internet-based\
    \ communication technology, enabling voice calls and other telephony services\
    \ over the internet instead of traditional phone lines."
  name: Numbers
- description: "Phone number porting, also known as number portability, is the process\
    \ of transferring an existing phone number from one telecommunications service\
    \ provider to another. This allows users to keep their existing phone number when\
    \ switching carriers or changing their communication service, ensuring continuity\
    \ and convenience without the need to notify all contacts of a new number."
  name: Number Ports
- description: "Offices refer to physical locations or spaces within a building, complex,\
    \ or establishment where business activities, administrative tasks, and professional\
    \ work are conducted. Offices can be associated with users, services and for billing\
    \ purposes within the system."
  name: Offices
- description: A phone inbound rule is a collection of predefined configurations set
    up to route inbound calls to specific destinations or extensions based on certain
    criteria.
  name: Phone Inbound Rules
- description: A phone outbound rule is a collection of predefined configurations
    set up to route outbound calls to specific destinations or extensions based on
    certain criteria.
  name: Phone Outbound Rules
- description: A phone inbound rule action is a predefined configuration set up to
    route inbound calls to specific destinations or extensions based on certain criteria.
  name: Phone Inbound Rule Actions
- description: A phone inbound rule action is a predefined configuration set up to
    route outbound calls to specific destinations or extensions based on certain criteria.
  name: Phone Outbound Rule Actions
- description: "Rate centers are geographic areas, such as cities or regions, used\
    \ in the telecommunications."
  name: Rate Centers
- description: "Servers, like Asterisk, FreeSWITCH, Skype, 3CX and others are software-based\
    \ communication systems that facilitate Voice over Internet Protocol (VoIP) services.\
    \ These servers handle call processing, signaling, and media functions, allowing\
    \ users to make voice and video calls over the internet."
  name: Servers
- description: "A time schedule is a configuration that allows users to define specific\
    \ periods when a business is open or closed. This schedule determines how incoming\
    \ calls are handled during different hours of the day, week, or year."
  name: Time Schedules
- description: A user refers to an individual or an authorized entity who has access
    to the system and consumes its services or use its management features to configure
    the account.
  name: Users
- description: User tokens are long-lived JWT that can be used to access the API.
  name: User Tokens
- description: Virtual Extensions are extensions that can be used to route callers
    to specific destinations within the phone system.
  name: Virtual Extensions
- description: "Voicemail is a feature that allows callers to leave recorded messages\
    \ when the recipient is unable to answer a phone call. It serves as a digital\
    \ answering machine, enabling people to retrieve and listen to messages at their\
    \ convenience."
  name: Voicemail
paths:
  /authentication:
    post:
      description: Add a new object to the system.
      operationId: createAuthentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authentication'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/authentication'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Authentication
      x-content-type: application/json
      x-accepts: application/json
  /acceptedsenders/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeAcceptedSender
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/acceptedsenders'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Accepted Senders
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getAcceptedSender
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/acceptedsenders'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Accepted Senders
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchAcceptedSender
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/acceptedsenders'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/acceptedsenders'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Accepted Senders
      x-content-type: application/json
      x-accepts: application/json
  /acceptedsenders:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findAcceptedSenders
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findAcceptedSenders_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Accepted Senders
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createAcceptedSender
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/acceptedsenders'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/acceptedsenders'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Accepted Senders
      x-content-type: application/json
      x-accepts: application/json
  /announcements/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeAnnouncement
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/announcements'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Announcements
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getAnnouncement
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/announcements'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Announcements
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchAnnouncement
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/announcements'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/announcements'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Announcements
      x-content-type: application/json
      x-accepts: application/json
  /announcements:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findAnnouncements
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findAnnouncements_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Announcements
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createAnnouncement
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/announcements'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/announcements'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Announcements
      x-content-type: application/json
      x-accepts: application/json
  /appmarketplace:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findAppMarketplace
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - App Marketplace
      x-accepts: application/json
  /contacts/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeContact
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/contacts'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Contacts
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getContact
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/contacts'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Contacts
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchContact
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contacts'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/contacts'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Contacts
      x-content-type: application/json
      x-accepts: application/json
  /contacts:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findContacts
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findContacts_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Contacts
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contacts'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/contacts'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Contacts
      x-content-type: application/json
      x-accepts: application/json
  /callqueues/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeCallQueue
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/callqueues'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Call Queues
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getCallQueue
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/callqueues'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Call Queues
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchCallQueue
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/callqueues'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/callqueues'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Call Queues
      x-content-type: application/json
      x-accepts: application/json
  /callqueues:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findCallQueues
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findCallQueues_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Call Queues
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createCallQueue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/callqueues'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/callqueues'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Call Queues
      x-content-type: application/json
      x-accepts: application/json
  /callqueueagents/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeCallQueue Agent
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/callqueueagents'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Call Queue Agents
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getCallQueue Agent
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/callqueueagents'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Call Queue Agents
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchCallQueue Agent
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/callqueueagents'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/callqueueagents'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Call Queue Agents
      x-content-type: application/json
      x-accepts: application/json
  /callqueueagents:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findCallQueue Agents
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findCallQueue_Agents_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Call Queue Agents
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createCallQueue Agent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/callqueueagents'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/callqueueagents'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Call Queue Agents
      x-content-type: application/json
      x-accepts: application/json
  /chatrooms/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeChatRoom
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chatrooms'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Chat Rooms
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getChatRoom
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chatrooms'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Chat Rooms
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchChatRoom
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatrooms'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chatrooms'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Chat Rooms
      x-content-type: application/json
      x-accepts: application/json
  /chatrooms:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findChatRooms
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findChatRooms_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Chat Rooms
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createChatRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chatrooms'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/chatrooms'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Chat Rooms
      x-content-type: application/json
      x-accepts: application/json
  /clients/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeClient
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/clients'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Clients
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getClient
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/clients'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Clients
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchClient
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clients'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/clients'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Clients
      x-content-type: application/json
      x-accepts: application/json
  /clients:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findClients
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findClients_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Clients
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createClient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clients'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/clients'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Clients
      x-content-type: application/json
      x-accepts: application/json
  /conversations/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeConversation
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conversations'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Conversations
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getConversation
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conversations'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Conversations
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchConversation
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conversations'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Conversations
      x-content-type: application/json
      x-accepts: application/json
  /conversations:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findConversations
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findConversations_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Conversations
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createConversation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conversations'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Conversations
      x-content-type: application/json
      x-accepts: application/json
  /conversationmessages/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeConversationMessage
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conversationmessages'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Conversation Messages
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getConversationMessage
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conversationmessages'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Conversation Messages
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchConversationMessage
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversationmessages'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conversationmessages'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Conversation Messages
      x-content-type: application/json
      x-accepts: application/json
  /conversationmessages:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findConversationMessages
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findConversationMessages_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Conversation Messages
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createConversationMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversationmessages'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conversationmessages'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Conversation Messages
      x-content-type: application/json
      x-accepts: application/json
  /conferencerooms/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeConferenceRoom
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conferencerooms'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Conference Rooms
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getConferenceRoom
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conferencerooms'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Conference Rooms
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchConferenceRoom
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conferencerooms'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conferencerooms'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Conference Rooms
      x-content-type: application/json
      x-accepts: application/json
  /conferencerooms:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findConferenceRooms
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findConferenceRooms_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Conference Rooms
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createConferenceRoom
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conferencerooms'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/conferencerooms'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Conference Rooms
      x-content-type: application/json
      x-accepts: application/json
  /conferencenumbers:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findConferenceNumbers
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Conference Numbers
      x-accepts: application/json
  /customers/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeCustomer
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/customers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Customers
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getCustomer
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/customers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Customers
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchCustomer
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customers'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/customers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Customers
      x-content-type: application/json
      x-accepts: application/json
  /customers:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findCustomers
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findCustomers_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Customers
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customers'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/customers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Customers
      x-content-type: application/json
      x-accepts: application/json
  /developerapps/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeDeveloperApp
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/developerapps'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Developer Apps
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getDeveloperApp
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/developerapps'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Developer Apps
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchDeveloperApp
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/developerapps'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/developerapps'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Developer Apps
      x-content-type: application/json
      x-accepts: application/json
  /developerapps:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findDeveloperApps
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findDeveloperApps_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Developer Apps
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createDeveloperApp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/developerapps'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/developerapps'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Developer Apps
      x-content-type: application/json
      x-accepts: application/json
  /developerappsubscriptions/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeDeveloperApp Subscription
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/developerappsubscriptions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Developer App Subscriptions
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getDeveloperApp Subscription
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/developerappsubscriptions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Developer App Subscriptions
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchDeveloperApp Subscription
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/developerappsubscriptions'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/developerappsubscriptions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Developer App Subscriptions
      x-content-type: application/json
      x-accepts: application/json
  /developerappsubscriptions:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findDeveloperApp Subscriptions
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findDeveloperApp_Subscriptions_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Developer App Subscriptions
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createDeveloperApp Subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/developerappsubscriptions'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/developerappsubscriptions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Developer App Subscriptions
      x-content-type: application/json
      x-accepts: application/json
  /directories/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removedirectory
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/directories'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Directories
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getdirectory
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/directories'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Directories
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchdirectory
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/directories'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/directories'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Directories
      x-content-type: application/json
      x-accepts: application/json
  /directories:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findDirectories
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findDirectories_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Directories
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createdirectory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/directories'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/directories'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Directories
      x-content-type: application/json
      x-accepts: application/json
  /domains/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeDomain
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/domains'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Domains
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getDomain
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/domains'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Domains
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchDomain
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domains'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/domains'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Domains
      x-content-type: application/json
      x-accepts: application/json
  /domains:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findDomains
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findDomains_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Domains
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domains'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/domains'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Domains
      x-content-type: application/json
      x-accepts: application/json
  /dnsrecords:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findDNSRecords
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - DNS Records
      x-accepts: application/json
  /faxes/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeFax
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faxes'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Faxes
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getFax
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faxes'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Faxes
      x-accepts: application/json
  /faxes:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findFaxes
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findFaxes_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Faxes
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createFax
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/faxes'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faxes'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Faxes
      x-content-type: application/json
      x-accepts: application/json
  /faxaccounts/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeFaxAccount
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faxaccounts'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Fax Accounts
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getFaxAccount
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faxaccounts'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Fax Accounts
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchFaxAccount
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/faxaccounts'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faxaccounts'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Fax Accounts
      x-content-type: application/json
      x-accepts: application/json
  /faxaccounts:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findFaxAccounts
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findFaxAccounts_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Fax Accounts
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createFaxAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/faxaccounts'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/faxaccounts'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Fax Accounts
      x-content-type: application/json
      x-accepts: application/json
  /findnumbers:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findFindNumbers
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Find Numbers
      x-accepts: application/json
  /firewall/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeFirewall
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/firewall'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Firewall
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getFirewall
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/firewall'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Firewall
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchFirewall
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/firewall'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/firewall'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Firewall
      x-content-type: application/json
      x-accepts: application/json
  /firewall:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findFirewall
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findFirewall_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Firewall
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createFirewall
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/firewall'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/firewall'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Firewall
      x-content-type: application/json
      x-accepts: application/json
  /groups/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeGroup
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/groups'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Groups
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getGroup
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/groups'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Groups
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchGroup
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/groups'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Groups
      x-content-type: application/json
      x-accepts: application/json
  /groups:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findGroups
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findGroups_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Groups
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/groups'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Groups
      x-content-type: application/json
      x-accepts: application/json
  /groupmembers/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeGroupMember
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/groupmembers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Group Members
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getGroupMember
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/groupmembers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Group Members
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchGroupMember
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupmembers'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/groupmembers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Group Members
      x-content-type: application/json
      x-accepts: application/json
  /groupmembers:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findGroupMembers
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findGroupMembers_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Group Members
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createGroupMember
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groupmembers'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/groupmembers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Group Members
      x-content-type: application/json
      x-accepts: application/json
  /holidays/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeHoliday
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/holidays'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Holidays
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getHoliday
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/holidays'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Holidays
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchHoliday
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/holidays'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/holidays'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Holidays
      x-content-type: application/json
      x-accepts: application/json
  /holidays:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findHolidays
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findHolidays_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Holidays
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createHoliday
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/holidays'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/holidays'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Holidays
      x-content-type: application/json
      x-accepts: application/json
  /info:
    get:
      description: Returns an object containing the requested information.
      operationId: getInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                properties: {}
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object
      tags:
      - Info
      x-accepts: application/json
  /invoiceitems/{id}:
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getInvoiceItem
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/invoiceitems'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Invoice Items
      x-accepts: application/json
  /invoiceitems:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findInvoiceItems
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findInvoiceItems_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Invoice Items
      x-accepts: application/json
  /invoices/{id}:
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getInvoice
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/invoices'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Invoices
      x-accepts: application/json
  /invoices:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findInvoices
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findInvoices_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Invoices
      x-accepts: application/json
  /licenses/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeLicense
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/licenses'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Licenses
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getLicense
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/licenses'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Licenses
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchLicense
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/licenses'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/licenses'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Licenses
      x-content-type: application/json
      x-accepts: application/json
  /licenses:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findLicenses
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findLicenses_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Licenses
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createLicense
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/licenses'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/licenses'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Licenses
      x-content-type: application/json
      x-accepts: application/json
  /menus/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeMenu
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/menus'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Menus
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getMenu
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/menus'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Menus
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchMenu
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/menus'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/menus'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Menus
      x-content-type: application/json
      x-accepts: application/json
  /menus:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findMenus
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findMenus_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Menus
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createMenu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/menus'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/menus'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Menus
      x-content-type: application/json
      x-accepts: application/json
  /menuoptions/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeMenuOption
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/menuoptions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Menu Options
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getMenuOption
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/menuoptions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Menu Options
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchMenuOption
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/menuoptions'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/menuoptions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Menu Options
      x-content-type: application/json
      x-accepts: application/json
  /menuoptions:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findMenuOptions
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findMenuOptions_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Menu Options
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createMenuOption
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/menuoptions'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/menuoptions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Menu Options
      x-content-type: application/json
      x-accepts: application/json
  /messagecampaigns/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeMessageCampaign
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messagecampaigns'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Message Campaigns
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getMessageCampaign
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messagecampaigns'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Message Campaigns
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchMessageCampaign
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/messagecampaigns'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messagecampaigns'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Message Campaigns
      x-content-type: application/json
      x-accepts: application/json
  /messagecampaigns:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findMessageCampaigns
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findMessageCampaigns_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Message Campaigns
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createMessageCampaign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/messagecampaigns'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messagecampaigns'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Message Campaigns
      x-content-type: application/json
      x-accepts: application/json
  /messagebrands/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeMessageBrand
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messagebrands'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Message Brands
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getMessageBrand
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messagebrands'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Message Brands
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchMessageBrand
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/messagebrands'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messagebrands'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Message Brands
      x-content-type: application/json
      x-accepts: application/json
  /messagebrands:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findMessageBrands
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findMessageBrands_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Message Brands
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createMessageBrand
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/messagebrands'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/messagebrands'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Message Brands
      x-content-type: application/json
      x-accepts: application/json
  /numbers/{id}:
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getNumber
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/numbers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Numbers
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchNumber
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/numbers'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/numbers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Numbers
      x-content-type: application/json
      x-accepts: application/json
  /numbers:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findNumbers
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findNumbers_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Numbers
      x-accepts: application/json
  /numberports/{id}:
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getNumberPort
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/numberports'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Number Ports
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchNumberPort
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/numberports'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/numberports'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Number Ports
      x-content-type: application/json
      x-accepts: application/json
  /numberports:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findNumberPorts
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findNumberPorts_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Number Ports
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createNumberPort
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/numberports'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/numberports'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Number Ports
      x-content-type: application/json
      x-accepts: application/json
  /offices/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeOffice
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/offices'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Offices
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getOffice
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/offices'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Offices
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchOffice
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/offices'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/offices'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Offices
      x-content-type: application/json
      x-accepts: application/json
  /offices:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findOffices
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findOffices_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Offices
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createOffice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/offices'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/offices'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Offices
      x-content-type: application/json
      x-accepts: application/json
  /phoneinboundrules/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removePhoneInbound Rule
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneinboundrules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Phone Inbound Rules
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getPhoneInbound Rule
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneinboundrules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Phone Inbound Rules
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchPhoneInbound Rule
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/phoneinboundrules'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneinboundrules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Phone Inbound Rules
      x-content-type: application/json
      x-accepts: application/json
  /phoneinboundrules:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findPhoneInbound Rules
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findPhoneInbound_Rules_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Phone Inbound Rules
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createPhoneInbound Rule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/phoneinboundrules'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneinboundrules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Phone Inbound Rules
      x-content-type: application/json
      x-accepts: application/json
  /phoneoutboundrules/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removePhoneOutbound Rule
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneoutboundrules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Phone Outbound Rules
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getPhoneOutbound Rule
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneoutboundrules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Phone Outbound Rules
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchPhoneOutbound Rule
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/phoneoutboundrules'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneoutboundrules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Phone Outbound Rules
      x-content-type: application/json
      x-accepts: application/json
  /phoneoutboundrules:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findPhoneOutbound Rules
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findPhoneOutbound_Rules_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Phone Outbound Rules
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createPhoneOutbound Rule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/phoneoutboundrules'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneoutboundrules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Phone Outbound Rules
      x-content-type: application/json
      x-accepts: application/json
  /phoneinboundruleactions/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removePhoneInbound Rule Action
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneinboundruleactions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Phone Inbound Rule Actions
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getPhoneInbound Rule Action
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneinboundruleactions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Phone Inbound Rule Actions
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchPhoneInbound Rule Action
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/phoneinboundruleactions'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneinboundruleactions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Phone Inbound Rule Actions
      x-content-type: application/json
      x-accepts: application/json
  /phoneinboundruleactions:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findPhoneInbound Rule Actions
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findPhoneInbound_Rule_Actions_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Phone Inbound Rule Actions
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createPhoneInbound Rule Action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/phoneinboundruleactions'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneinboundruleactions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Phone Inbound Rule Actions
      x-content-type: application/json
      x-accepts: application/json
  /phoneoutboundruleactions/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removePhoneOutbound Rule Action
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneoutboundruleactions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Phone Outbound Rule Actions
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getPhoneOutbound Rule Action
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneoutboundruleactions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Phone Outbound Rule Actions
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchPhoneOutbound Rule Action
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/phoneoutboundruleactions'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneoutboundruleactions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Phone Outbound Rule Actions
      x-content-type: application/json
      x-accepts: application/json
  /phoneoutboundruleactions:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findPhoneOutbound Rule Actions
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findPhoneOutbound_Rule_Actions_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Phone Outbound Rule Actions
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createPhoneOutbound Rule Action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/phoneoutboundruleactions'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/phoneoutboundruleactions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Phone Outbound Rule Actions
      x-content-type: application/json
      x-accepts: application/json
  /ratecenters/{id}:
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getRateCenter
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ratecenters'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Rate Centers
      x-accepts: application/json
  /ratecenters:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findRateCenters
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findRateCenters_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Rate Centers
      x-accepts: application/json
  /servers/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeServer
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/servers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Servers
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getServer
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/servers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Servers
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchServer
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servers'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/servers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Servers
      x-content-type: application/json
      x-accepts: application/json
  /servers:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findServers
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findServers_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Servers
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/servers'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/servers'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Servers
      x-content-type: application/json
      x-accepts: application/json
  /timeschedules/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeTimeSchedule
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/timeschedules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Time Schedules
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getTimeSchedule
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/timeschedules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Time Schedules
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchTimeSchedule
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeschedules'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/timeschedules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Time Schedules
      x-content-type: application/json
      x-accepts: application/json
  /timeschedules:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findTimeSchedules
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findTimeSchedules_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Time Schedules
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createTimeSchedule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeschedules'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/timeschedules'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Time Schedules
      x-content-type: application/json
      x-accepts: application/json
  /users/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeUser
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/users'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Users
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getUser
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/users'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Users
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchUser
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/users'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Users
      x-content-type: application/json
      x-accepts: application/json
  /users:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findUsers
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findUsers_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Users
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/users'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Users
      x-content-type: application/json
      x-accepts: application/json
  /usertokens/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeUserToken
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/usertokens'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - User Tokens
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getUserToken
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/usertokens'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - User Tokens
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchUserToken
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usertokens'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/usertokens'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - User Tokens
      x-content-type: application/json
      x-accepts: application/json
  /usertokens:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findUserTokens
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findUserTokens_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - User Tokens
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createUserToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/usertokens'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/usertokens'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - User Tokens
      x-content-type: application/json
      x-accepts: application/json
  /virtualextensions/{id}:
    delete:
      description: "Delete an object by id, removing it from the service."
      operationId: removeVirtualExtension
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/virtualextensions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the deleted data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Delete object by id
      tags:
      - Virtual Extensions
      x-accepts: application/json
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getVirtualExtension
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/virtualextensions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Virtual Extensions
      x-accepts: application/json
    patch:
      description: Make updates to specific fields within the record without replacing
        the entire dataset.
      operationId: patchVirtualExtension
      parameters:
      - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/virtualextensions'
        description: The request data.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/virtualextensions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the modified data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Patch object's data
      tags:
      - Virtual Extensions
      x-content-type: application/json
      x-accepts: application/json
  /virtualextensions:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findVirtualExtensions
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/findVirtualExtensions_200_response'
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Virtual Extensions
      x-accepts: application/json
    post:
      description: Add a new object to the system.
      operationId: createVirtualExtension
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/virtualextensions'
        description: The JSON object that will be posted to the REST API endpoint.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/virtualextensions'
                - $ref: '#/components/schemas/responseUsers'
                - $ref: '#/components/schemas/responseDate'
          description: A JSON object containing the new object created
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Create a new object
      tags:
      - Virtual Extensions
      x-content-type: application/json
      x-accepts: application/json
  /voicemail/{id}:
    get:
      description: Get an object from the REST API Endpoint by its unique id.
      operationId: getVoicemail
      parameters:
      - $ref: '#/components/parameters/id'
      responses:
        "200":
          content:
            application/json: {}
          description: A JSON object containing the requested data.
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseError'
          description: Not Found
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Get object by id
      tags:
      - Voicemail
      x-accepts: application/json
  /voicemail:
    get:
      description: 'Search and retrieve multiple objects simultaneously. '
      operationId: findVoicemail
      parameters:
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/skip'
      - $ref: '#/components/parameters/sort'
      - $ref: '#/components/parameters/select'
      - $ref: '#/components/parameters/or'
      - $ref: '#/components/parameters/and'
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: A JSON object containing the requested data
        "400":
          $ref: '#/components/responses/400'
        "401":
          $ref: '#/components/responses/401'
        "403":
          $ref: '#/components/responses/403'
        "405":
          $ref: '#/components/responses/405'
        "406":
          $ref: '#/components/responses/406'
        "408":
          $ref: '#/components/responses/408'
        "429":
          $ref: '#/components/responses/429'
        "500":
          $ref: '#/components/responses/500'
        "503":
          $ref: '#/components/responses/503'
      summary: Find multiple objects
      tags:
      - Voicemail
      x-accepts: application/json
components:
  parameters:
    id:
      description: The ObjectId (unique 12 bytes ID) of record you would like to GET.
      explode: false
      in: path
      name: id
      required: true
      schema: {}
      style: simple
    limit:
      description: $limit will return only the number of results you specify.
      explode: true
      in: query
      name: $limit
      required: false
      schema:
        format: int32
      style: form
    skip:
      description: $skip will skip the specified number of results.
      explode: true
      in: query
      name: $skip
      required: false
      schema:
        format: int32
      style: form
    sort:
      description: "$sort will sort based on the object you provide. It can contain\
        \ a list of properties by which to sort mapped to the order (1 ascending,\
        \ -1 descending)."
      explode: true
      in: query
      name: $sort
      required: false
      schema: {}
      style: form
    search:
      description: Filter results by the specified value.
      explode: true
      in: query
      name: $search
      required: false
      schema: {}
      style: form
    select:
      description: $select allows to pick which fields to include in the result.
      explode: true
      in: query
      name: $select
      required: false
      schema:
        items: {}
      style: form
    or:
      description: Find all records that match any of the given criteria.
      explode: true
      in: query
      name: $or
      required: false
      schema:
        items: {}
      style: form
    and:
      description: Find all records that match all of the given criteria.
      explode: true
      in: query
      name: $and
      required: false
      schema:
        items: {}
      style: form
  responses:
    "400":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseError'
      description: Bad Request
    "401":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseError'
      description: Not Authenticated
    "403":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseError'
      description: Forbidden
    "405":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseError'
      description: Method Not Allowed
    "406":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseError'
      description: Not Acceptable
    "408":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseError'
      description: Timeout
    "429":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseError'
      description: Too Many Requests
    "500":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseError'
      description: General Error
    "503":
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/responseError'
      description: Unavailable
    find:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/find'
      description: A JSON object containing the requested data
  schemas:
    responseError:
      properties:
        name: {}
        message: {}
        code:
          format: int32
        className: {}
        errors:
          items: {}
    responseDate:
      properties:
        createdAt:
          format: date-time
        updatedAt:
          format: date-time
    responseUsers:
      properties:
        createdByUserId:
          description: ObjectId (unique 12 bytes ID)
        updatedByUserId:
          description: ObjectId (unique 12 bytes ID)
    find:
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
      required:
      - limit
      - total
    authentication:
      properties:
        username: {}
        password: {}
        strategy: {}
      required:
      - password
      - strategy
      - username
    acceptedsenders:
      properties:
        object:
          description: ObjectId (unique 12 bytes ID)
        service:
          description: ObjectId (unique 12 bytes ID)
        serviceRef: {}
        ref: {}
      required:
      - object
      - ref
      - service
      - serviceRef
    announcements:
      properties:
        name:
          maxLength: 45
        type: {}
        voice: {}
        text:
          maxLength: 255
          minLength: 2
      required:
      - name
      - type
    contacts:
      properties:
        email:
          maxLength: 45
        first:
          maxLength: 45
        last:
          maxLength: 45
        mobilePhone:
          maxLength: 20
        businessPhone:
          maxLength: 20
        faxPhone:
          maxLength: 20
        extension:
          format: int32
        jobTitle:
          maxLength: 45
        department:
          maxLength: 45
        avatar:
          maxLength: 255
      required:
      - first
    callqueues:
      properties:
        name:
          maxLength: 45
        strategy: {}
        announcePosition:
          format: int32
        moh:
          default: deafult
          maxLength: 255
        callerResumeTimeout:
          default: 3600
          format: int32
        maxWaitTime:
          default: 300
          format: int32
        maxWaitTimeNoAgent:
          default: 300
          format: int32
        maxNoAnswer:
          default: 1000000
          format: int32
        noAnswerDelayTimeout:
          default: 60
          format: int32
        rejectTimeout:
          default: 60
          format: int32
        busyTimeout:
          default: 60
          format: int32
        wrapUpTimeout:
          default: 10
          format: int32
        timeBasedScore:
          default: queue
        tierRulesApply: {}
        tierRuleNoAgentNoWait:
          default: true
        tierRuleWaitSecond:
          default: 300
          format: int32
        tierRuleWaitMultiplyLevel:
          default: true
        abandonedResumeAllowed:
          default: true
        discardAbandonedAfter:
          default: 14400
          format: int32
        maxWaitTimeNoAgentTimeReached:
          default: 5
          format: int32
      required:
      - abandonedResumeAllowed
      - callerResumeTimeout
      - maxNoAnswer
      - maxWaitTime
      - maxWaitTimeNoAgent
      - maxWaitTimeNoAgentTimeReached
      - moh
      - name
      - strategy
      - tierRuleNoAgentNoWait
      - tierRuleWaitMultiplyLevel
      - tierRulesApply
      - timeBasedScore
    callqueueagents:
      properties:
        callqueue:
          description: ObjectId (unique 12 bytes ID)
        user:
          description: ObjectId (unique 12 bytes ID)
        priority:
          default: 1
          format: int32
        tier:
          default: 1
          format: int32
      required:
      - callqueue
      - priority
      - tier
      - user
    chatrooms:
      properties:
        name:
          maxLength: 255
        users: {}
        avatar:
          maxLength: 512
        direct: {}
      required:
      - users
    clients:
      properties:
        name:
          maxLength: 45
        user:
          description: ObjectId (unique 12 bytes ID)
        mac:
          maxLength: 45
          minLength: 5
        httpUserAgent:
          maxLength: 45
          minLength: 1
        manufacture:
          maxLength: 20
          minLength: 4
        status:
          default: 1
          format: int32
      required:
      - mac
      - name
      - user
    conversations:
      properties:
        contacts: {}
        number:
          description: ObjectId (unique 12 bytes ID)
        channel: {}
        ref: {}
        object:
          description: ObjectId (unique 12 bytes ID)
        status:
          default: open
      required:
      - channel
      - object
      - ref
      - status
    conversationmessages:
      properties:
        conversation:
          description: ObjectId (unique 12 bytes ID)
        from: {}
        fromNumber:
          maxLength: 40
        to: {}
        text:
          maxLength: 2048
        direction: {}
        attachments: {}
        referenceId:
          maxLength: 255
      required:
      - direction
      - from
      - fromNumber
      - to
    conferencerooms:
      properties:
        name:
          maxLength: 45
        passcode:
          maxLength: 20
          minLength: 6
        dialInPin:
          format: int32
        isUserRoom: {}
        isChatRoom: {}
        lobby:
          format: int32
        requirePasscode:
          format: int32
        share: {}
        chatroom:
          description: ObjectId (unique 12 bytes ID)
      required:
      - name
    customers:
      properties:
        name:
          maxLength: 45
        status:
          default: active
        websiteUrl:
          maxLength: 255
        logo:
          maxLength: 255
        credit:
          format: int32
        adminUserId:
          description: ObjectId (unique 12 bytes ID)
        billingUserId:
          description: ObjectId (unique 12 bytes ID)
        callRecordingUserId:
          description: ObjectId (unique 12 bytes ID)
        callForwardingCallLimit:
          default: 10
          format: int32
        supportUserId:
          description: ObjectId (unique 12 bytes ID)
        automaticRefillAmount:
          format: int32
        lowBalanceAlertAmount:
          format: int32
        lowBalanceAlertAt:
          format: date-time
        lowBalanceAlertCount:
          format: int32
        lastAutomaticRefillInvoice:
          description: ObjectId (unique 12 bytes ID)
        internationalCalling:
          format: int32
        createdByIP:
          maxLength: 45
          minLength: 8
        callDebug:
          format: int32
        mediaBypass:
          format: int32
        accountLock:
          default: 1
          format: int32
        callRecording:
          format: int32
        cdrRetention:
          default: 12
          format: int32
        cnamLookUps:
          format: int32
        holdMusic:
          format: int32
        transcribeCalls:
          format: int32
        maxOutboundCallRate:
          default: 1
          format: int32
        defaultBillMethod:
          default: credit
      required:
      - defaultBillMethod
      - name
    developerapps:
      properties:
        name:
          maxLength: 45
        description:
          maxLength: 4096
        type: {}
        visibility: {}
        requireId:
          format: int32
        isFree:
          default: 1
          format: int32
        feeDescription:
          maxLength: 4096
        integrationType: {}
        services:
          items:
            enum:
            - calendarevents
            - callqueues
            - cdrs
            - chatmessages
            - contacts
            - conversationmessages
            - faxes
            - firewall
            - users
            - voicemail
        events:
          items:
            enum:
            - create
            - patch
            - removed
        user:
          description: ObjectId (unique 12 bytes ID)
        webhookUrl:
          maxLength: 1024
        termsOfServiceUrl:
          maxLength: 1024
        privacyPolicyUrl:
          maxLength: 1024
        permissions:
          default: {}
        status:
          default: pending
        webhookAuthType: {}
        webhookUsername:
          maxLength: 255
        webhookPassword:
          maxLength: 255
        webhookTokenName:
          maxLength: 255
        webhookToken:
          maxLength: 255
      required:
      - integrationType
      - name
      - services
      - status
      - type
      - user
      - visibility
    developerappsubscriptions:
      properties:
        developerApp:
          description: ObjectId (unique 12 bytes ID)
        object:
          description: ObjectId (unique 12 bytes ID)
        ref:
          maxLength: 45
        permissions:
          default: {}
        requireId:
          format: int32
        services:
          items:
            enum:
            - calendarevents
            - callqueues
            - cdrs
            - chatmessages
            - contacts
            - conversationmessages
            - faxes
            - firewall
            - users
            - voicemail
        events:
          items:
            enum:
            - create
            - patch
            - removed
      required:
      - developerApp
      - services
    directories:
      properties:
        name:
          maxLength: 45
        type: {}
        groups:
          items:
            ref: groups
        announcement:
          description: ObjectId (unique 12 bytes ID)
      required:
      - name
      - type
    domains:
      properties:
        name:
          maxLength: 255
          minLength: 2
        status:
          format: int32
      required:
      - name
    faxes:
      properties:
        callerIdNumber:
          maxLength: 45
        callerDestination:
          maxLength: 45
        pages:
          format: int32
        statusCode:
          format: int32
        transferedPages:
          format: int32
        status:
          default: processing
        error:
          maxLength: 255
        type: {}
        order:
          description: ObjectId (unique 12 bytes ID)
        file:
          description: ObjectId (unique 12 bytes ID)
        contact:
          description: ObjectId (unique 12 bytes ID)
        number:
          description: ObjectId (unique 12 bytes ID)
        faxAccount:
          description: ObjectId (unique 12 bytes ID)
        retries:
          format: int32
        invoice:
          description: ObjectId (unique 12 bytes ID)
        senderEmail:
          maxLength: 45
        senderName:
          maxLength: 45
      required:
      - callerDestination
      - callerIdNumber
      - faxAccount
      - number
      - status
      - type
    faxaccounts:
      properties:
        name:
          maxLength: 45
        order:
          description: ObjectId (unique 12 bytes ID)
        inboundNotification:
          description: ObjectId (unique 12 bytes ID)
        outboundNotification:
          description: ObjectId (unique 12 bytes ID)
        number:
          description: ObjectId (unique 12 bytes ID)
      required:
      - name
    firewall:
      properties:
        name:
          maxLength: 45
        description:
          maxLength: 255
        priority:
          format: int32
        type: {}
        target: {}
        direction: {}
        param:
          maxLength: 45
          minLength: 1
        hits:
          format: int32
        ai:
          format: int32
        status:
          default: 1
          format: int32
        notificationHits:
          default: 1
          format: int32
      required:
      - name
      - param
      - priority
      - target
      - type
    groups:
      properties:
        name:
          maxLength: 45
        description:
          maxLength: 255
        status:
          default: 1
          format: int32
      required:
      - name
    groupmembers:
      properties:
        group:
          description: ObjectId (unique 12 bytes ID)
        object:
          description: ObjectId (unique 12 bytes ID)
        priority:
          format: int32
        ref: {}
      required:
      - group
      - object
      - ref
    holidays:
      properties:
        name:
          maxLength: 45
        object:
          description: ObjectId (unique 12 bytes ID)
        objectRef:
          maxLength: 45
          minLength: 2
        dateTimeRanges:
          items:
            items:
              format: date-time
        status:
          default: 1
          format: int32
        destinationType: {}
        destination:
          description: ObjectId (unique 12 bytes ID)
        ref:
          maxLength: 100
          minLength: 5
        callForwardingDestination:
          maxLength: 45
          minLength: 10
      required:
      - dateTimeRanges
      - destinationType
      - name
      - object
      - objectRef
    invoiceitems:
      properties:
        name:
          maxLength: 45
        amount:
          format: int32
        setup:
          format: int32
        taxes:
          format: int32
        quantity:
          default: 1
          format: int32
        invoice:
          description: ObjectId (unique 12 bytes ID)
        ref:
          maxLength: 100
          minLength: 5
        object:
          description: ObjectId (unique 12 bytes ID)
      required:
      - amount
      - invoice
      - name
      - quantity
    invoices:
      properties:
        amount:
          format: int32
        subtotal:
          format: int32
        tax:
          format: int32
        setup:
          format: int32
        discount:
          format: int32
        closedAt:
          format: date-time
        dueAt:
          format: date-time
        status:
          default: open
        error: {}
      required:
      - amount
      - dueAt
      - status
      - subtotal
    licenses:
      properties:
        order:
          description: ObjectId (unique 12 bytes ID)
        object:
          description: ObjectId (unique 12 bytes ID)
        ref:
          maxLength: 45
        field:
          maxLength: 45
      required:
      - object
      - order
      - ref
    menus:
      properties:
        name:
          maxLength: 45
        maxExtensionLength:
          default: 4
          format: int32
        speechRecognition:
          format: int32
        directory:
          description: ObjectId (unique 12 bytes ID)
        greetingType: {}
        greetingTTS: {}
        menuVoice: {}
        exitSound:
          default: default
        transferAnnouncement:
          default: default
        maxFailures:
          default: 3
          format: int32
        maxTimeouts:
          default: 3
          format: int32
        timeout:
          default: 10
          format: int32
        touchToneTerminators:
          default: 1
          format: int32
        timeschedule:
          description: ObjectId (unique 12 bytes ID)
        destinationType: {}
        destination:
          description: ObjectId (unique 12 bytes ID)
        ref:
          maxLength: 100
          minLength: 5
        callForwardingDestination:
          maxLength: 45
          minLength: 10
      required:
      - greetingType
      - maxExtensionLength
      - name
    menuoptions:
      properties:
        name:
          maxLength: 45
        digit:
          format: int32
        menus: {}
        destinationType: {}
        destination:
          description: ObjectId (unique 12 bytes ID)
        ref:
          maxLength: 100
          minLength: 5
        callForwardingDestination:
          maxLength: 45
          minLength: 10
      required:
      - destinationType
      - digit
      - menus
      - name
    messagecampaigns:
      properties:
        name:
          maxLength: 45
        campaignId:
          maxLength: 45
        brandId:
          maxLength: 45
        order:
          description: ObjectId (unique 12 bytes ID)
        subscriberOptin:
          format: int32
        subscriberOptout:
          format: int32
        subscriberHelp:
          format: int32
        numberPool:
          format: int32
        directLending:
          format: int32
        embeddedLink:
          format: int32
        embeddedPhone:
          format: int32
        affiliateMarketing:
          format: int32
        ageGated:
          format: int32
        mnos: {}
        referenceId:
          maxLength: 45
        useCase:
          maxLength: 45
        subUseCases: {}
        sample1:
          maxLength: 255
        sample2:
          maxLength: 255
        sample3:
          maxLength: 255
        sample4:
          maxLength: 255
        sample5:
          maxLength: 255
      required:
      - brandId
      - name
      - order
    messagebrands:
      properties:
        name:
          maxLength: 45
        brandId:
          maxLength: 45
        ein:
          maxLength: 20
        user:
          description: ObjectId (unique 12 bytes ID)
        order:
          description: ObjectId (unique 12 bytes ID)
        status: {}
        brandRelationship:
          maxLength: 45
        vertical:
          maxLength: 45
        entityType:
          maxLength: 45
        cspId:
          maxLength: 45
        einIssuingCountry:
          maxLength: 2
        universalEin:
          maxLength: 45
        referenceId:
          maxLength: 45
      required:
      - ein
      - name
      - order
      - user
    numbers:
      properties:
        inUse:
          default: 1
          format: int32
        name:
          maxLength: 20
          minLength: 10
        countryCode:
          maxLength: 4
          minLength: 1
        amount:
          format: int32
        perMinuteRate:
          format: int32
        provider:
          description: ObjectId (unique 12 bytes ID)
        originalProvider:
          description: ObjectId (unique 12 bytes ID)
        providerOrderId:
          maxLength: 45
        fax:
          format: int32
        voice:
          format: int32
        status:
          default: 1
          format: int32
        sms:
          format: int32
        mms:
          format: int32
        changeRegionOrderId:
          maxLength: 45
          minLength: 5
        changeRegionOrderDate:
          format: date-time
        directoryListing:
          description: ObjectId (unique 12 bytes ID)
        directoryListingOrderId:
          maxLength: 45
          minLength: 5
        directoryListingOrderDate:
          format: date-time
        callerName:
          maxLength: 45
        callerNameOrderId:
          maxLength: 45
        callerNameOrderDate:
          format: date-time
        e911:
          description: ObjectId (unique 12 bytes ID)
        e911OrderId:
          maxLength: 45
          minLength: 5
        e911OrderDate:
          format: date-time
        messageCampaign:
          description: ObjectId (unique 12 bytes ID)
          maxLength: 45
        messageClass: {}
        messageType: {}
        messageCampaignOrderId:
          maxLength: 45
        messageCampaignOrderDate:
          format: date-time
        e911Supported:
          format: int32
        callerNameSupported:
          format: int32
        directoryListingSupported:
          format: int32
        messagingSupported:
          format: int32
        destinationType:
          default: park
        destination:
          description: ObjectId (unique 12 bytes ID)
        ref:
          maxLength: 100
          minLength: 5
        callForwardingDestination:
          maxLength: 45
          minLength: 10
      required:
      - countryCode
      - destinationType
      - name
      - provider
    numberports:
      properties:
        name:
          maxLength: 45
        type: {}
        typeOfService: {}
        authorizedPerson:
          maxLength: 45
        desiredDueDate:
          format: date-time
        accountNumber:
          maxLength: 45
        accountPhoneNumber:
          maxLength: 20
          minLength: 10
        office:
          description: ObjectId (unique 12 bytes ID)
        e911:
          format: int32
        invoice:
          description: ObjectId (unique 12 bytes ID)
        status:
          default: processing
        destinationType: {}
        destination:
          description: ObjectId (unique 12 bytes ID)
        ref:
          maxLength: 100
          minLength: 5
        callForwardingDestination:
          maxLength: 45
          minLength: 10
      required:
      - accountNumber
      - accountPhoneNumber
      - authorizedPerson
      - desiredDueDate
      - destinationType
      - invoice
      - name
      - office
      - status
      - type
      - typeOfService
    offices:
      properties:
        name:
          maxLength: 45
        streetNumber:
          maxLength: 45
        streetName:
          maxLength: 20
        preDirection:
          maxLength: 2
        streetSuffix:
          maxLength: 4
          minLength: 2
        city:
          maxLength: 45
        state:
          maxLength: 45
        zip:
          description: ObjectId (unique 12 bytes ID)
        zipCode:
          maxLength: 45
        address2:
          maxLength: 45
        country:
          maxLength: 2
          minLength: 2
        providers: {}
        region:
          description: ObjectId (unique 12 bytes ID)
      required:
      - city
      - country
      - name
      - streetName
      - streetNumber
      - streetSuffix
    phoneinboundrules:
      properties:
        name:
          maxLength: 45
        description:
          maxLength: 255
        outboundCallerId:
          maxLength: 255
          minLength: 1
      required:
      - name
    phoneoutboundrules:
      properties:
        name:
          maxLength: 45
        description:
          maxLength: 255
        status:
          default: 1
          format: int32
        outboundCallerId:
          maxLength: 45
      required:
      - name
    phoneinboundruleactions:
      properties:
        name:
          maxLength: 45
        phoneinboundrule:
          description: ObjectId (unique 12 bytes ID)
        timeschedule:
          description: ObjectId (unique 12 bytes ID)
        timeout:
          format: int32
        status:
          default: 1
          format: int32
        priority:
          default: 1
          format: int32
        destinationType: {}
        destination:
          description: ObjectId (unique 12 bytes ID)
        ref:
          maxLength: 100
          minLength: 5
        callForwardingDestination:
          maxLength: 45
          minLength: 10
      required:
      - destinationType
      - name
      - phoneinboundrule
      - priority
    phoneoutboundruleactions:
      properties:
        name:
          maxLength: 45
        group:
          description: ObjectId (unique 12 bytes ID)
        phoneoutboundrule:
          description: ObjectId (unique 12 bytes ID)
        status:
          default: 1
          format: int32
        priority:
          default: 1
          format: int32
        startingChars:
          maxLength: 20
        contains:
          maxLength: 20
        lengthType: {}
        length:
          format: int32
        appendChars:
          maxLength: 20
        prependChars:
          maxLength: 20
        rangeStart:
          format: int32
        rangeEnd:
          format: int32
        removeStartingChars:
          format: int32
        removeEndingChars:
          format: int32
        route:
          default: default
        routingType: {}
      required:
      - name
      - phoneoutboundrule
      - priority
      - route
    ratecenters:
      properties:
        npa:
          maxLength: 3
          minLength: 3
        nxx:
          maxLength: 3
          minLength: 3
        lata:
          maxLength: 3
          minLength: 3
        locState:
          maxLength: 2
          minLength: 2
        rcAbbre:
          maxLength: 45
      required:
      - lata
      - locState
      - npa
      - nxx
      - rcAbbre
    servers:
      properties:
        name:
          maxLength: 45
        host:
          maxLength: 45
          minLength: 5
        port:
          default: 5060
          format: int32
        callerId:
          maxLength: 45
        type: {}
        domesticOutboundCallLimit:
          default: 10
          format: int32
        domesticInboundCallLimit:
          default: 10
          format: int32
        internationalOutboundCallLimit:
          default: 10
          format: int32
        tollFreeChannelLimit:
          default: 10
          format: int32
        inboundSipTrunkingOrder:
          description: ObjectId (unique 12 bytes ID)
        outboundSipTrunkingOrder:
          description: ObjectId (unique 12 bytes ID)
        noInstantRingBack:
          format: int32
        bypassMedia:
          format: int32
        disableRTPAutoAdjust:
          format: int32
      required:
      - domesticInboundCallLimit
      - domesticOutboundCallLimit
      - host
      - internationalOutboundCallLimit
      - name
      - port
      - tollFreeChannelLimit
      - type
    timeschedules:
      properties:
        name:
          maxLength: 45
        timezone:
          default: America/New_York
          maxLength: 45
        sunday:
          default:
            schedules:
            - start: 12:00 AM
              end: 12:00 AM
        monday:
          default:
            schedules:
            - start: 12:00 AM
              end: 12:00 AM
        tuesday:
          default:
            schedules:
            - start: 12:00 AM
              end: 12:00 AM
        wednesday:
          default:
            schedules:
            - start: 12:00 AM
              end: 12:00 AM
        thursday:
          default:
            schedules:
            - start: 12:00 AM
              end: 12:00 AM
        friday:
          default:
            schedules:
            - start: 12:00 AM
              end: 12:00 AM
        saturday:
          default:
            schedules:
            - start: 12:00 AM
              end: 12:00 AM
      required:
      - friday
      - monday
      - name
      - saturday
      - sunday
      - thursday
      - timezone
      - tuesday
      - wednesday
    users:
      properties:
        email:
          maxLength: 255
          minLength: 5
        password:
          maxLength: 255
          minLength: 8
        sipPassword:
          maxLength: 45
          minLength: 8
        turnPassword:
          maxLength: 45
          minLength: 8
        first:
          maxLength: 45
        last:
          maxLength: 45
        mobilePhone:
          maxLength: 20
        businessPhone:
          maxLength: 20
          minLength: 7
        extension:
          format: int32
        customCallerId:
          format: int32
        jobTitle:
          maxLength: 45
        department:
          maxLength: 45
        office:
          description: ObjectId (unique 12 bytes ID)
        avatar:
          maxLength: 255
        language:
          default: en
          maxLength: 5
        isPrimary:
          format: int32
        status:
          default: active
        vmGreetingType:
          default: default
        vmTimeout:
          default: 20
          format: int32
        vmFile:
          description: ObjectId (unique 12 bytes ID)
        vmPlaybackNumber:
          maxLength: 20
        pin:
          default: 1234
          format: int32
        number:
          description: ObjectId (unique 12 bytes ID)
        region:
          description: ObjectId (unique 12 bytes ID)
        callerIdNumber:
          maxLength: 20
        adminPermission: {}
        billingPermission: {}
        phonePermission: {}
        agilePermission: {}
        jobServerPermission: {}
        mediaServerPermission: {}
        mailServerPermission: {}
        superAdminPermission: {}
        timezone:
          default: America/New_York
        vmTranscription:
          format: int32
        communication:
          default:
            notifications:
              email: true
              sms: true
            missedCalls:
              email: true
              sms: true
            callRecordings:
              email: true
              sms: true
            newsletters:
              email: true
              sms: true
            voicemails:
              email: true
              sms: true
            web:
              sounds: true
      required:
      - email
      - first
      - last
      - password
      - sipPassword
      - timezone
    usertokens:
      properties:
        name:
          maxLength: 45
        user:
          description: ObjectId (unique 12 bytes ID)
        token:
          maxLength: 2048
        expiresInYears:
          default: 1
          format: int32
        status:
          default: 1
          format: int32
      required:
      - expiresInYears
      - name
      - token
      - user
    virtualextensions:
      properties:
        name:
          maxLength: 45
        extension:
          format: int32
        phoneinboundrule:
          description: ObjectId (unique 12 bytes ID)
      required:
      - extension
      - name
    findAcceptedSenders_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/acceptedsenders'
      required:
      - data
      - limit
      - skip
      - total
    findAnnouncements_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/announcements'
      required:
      - data
      - limit
      - skip
      - total
    findContacts_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/contacts'
      required:
      - data
      - limit
      - skip
      - total
    findCallQueues_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/callqueues'
      required:
      - data
      - limit
      - skip
      - total
    findCallQueue_Agents_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/callqueueagents'
      required:
      - data
      - limit
      - skip
      - total
    findChatRooms_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/chatrooms'
      required:
      - data
      - limit
      - skip
      - total
    findClients_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/clients'
      required:
      - data
      - limit
      - skip
      - total
    findConversations_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/conversations'
      required:
      - data
      - limit
      - skip
      - total
    findConversationMessages_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/conversationmessages'
      required:
      - data
      - limit
      - skip
      - total
    findConferenceRooms_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/conferencerooms'
      required:
      - data
      - limit
      - skip
      - total
    findCustomers_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/customers'
      required:
      - data
      - limit
      - skip
      - total
    findDeveloperApps_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/developerapps'
      required:
      - data
      - limit
      - skip
      - total
    findDeveloperApp_Subscriptions_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/developerappsubscriptions'
      required:
      - data
      - limit
      - skip
      - total
    findDirectories_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/directories'
      required:
      - data
      - limit
      - skip
      - total
    findDomains_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/domains'
      required:
      - data
      - limit
      - skip
      - total
    findFaxes_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/faxes'
      required:
      - data
      - limit
      - skip
      - total
    findFaxAccounts_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/faxaccounts'
      required:
      - data
      - limit
      - skip
      - total
    findFirewall_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/firewall'
      required:
      - data
      - limit
      - skip
      - total
    findGroups_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/groups'
      required:
      - data
      - limit
      - skip
      - total
    findGroupMembers_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/groupmembers'
      required:
      - data
      - limit
      - skip
      - total
    findHolidays_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/holidays'
      required:
      - data
      - limit
      - skip
      - total
    findInvoiceItems_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/invoiceitems'
      required:
      - data
      - limit
      - skip
      - total
    findInvoices_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/invoices'
      required:
      - data
      - limit
      - skip
      - total
    findLicenses_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/licenses'
      required:
      - data
      - limit
      - skip
      - total
    findMenus_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/menus'
      required:
      - data
      - limit
      - skip
      - total
    findMenuOptions_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/menuoptions'
      required:
      - data
      - limit
      - skip
      - total
    findMessageCampaigns_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/messagecampaigns'
      required:
      - data
      - limit
      - skip
      - total
    findMessageBrands_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/messagebrands'
      required:
      - data
      - limit
      - skip
      - total
    findNumbers_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/numbers'
      required:
      - data
      - limit
      - skip
      - total
    findNumberPorts_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/numberports'
      required:
      - data
      - limit
      - skip
      - total
    findOffices_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/offices'
      required:
      - data
      - limit
      - skip
      - total
    findPhoneInbound_Rules_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/phoneinboundrules'
      required:
      - data
      - limit
      - skip
      - total
    findPhoneOutbound_Rules_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/phoneoutboundrules'
      required:
      - data
      - limit
      - skip
      - total
    findPhoneInbound_Rule_Actions_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/phoneinboundruleactions'
      required:
      - data
      - limit
      - skip
      - total
    findPhoneOutbound_Rule_Actions_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/phoneoutboundruleactions'
      required:
      - data
      - limit
      - skip
      - total
    findRateCenters_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/ratecenters'
      required:
      - data
      - limit
      - skip
      - total
    findServers_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/servers'
      required:
      - data
      - limit
      - skip
      - total
    findTimeSchedules_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/timeschedules'
      required:
      - data
      - limit
      - skip
      - total
    findUsers_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/users'
      required:
      - data
      - limit
      - skip
      - total
    findUserTokens_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/usertokens'
      required:
      - data
      - limit
      - skip
      - total
    findVirtualExtensions_200_response:
      example:
        total: ""
        data: ""
        limit: ""
        skip: ""
      properties:
        total:
          format: int32
        limit:
          format: int32
        skip:
          format: int32
        data:
          items:
            $ref: '#/components/schemas/virtualextensions'
      required:
      - data
      - limit
      - skip
      - total
  securitySchemes:
    jwt:
      description: "JWT to authorize requests. You can obtain a short-term JWT key\
        \ from the /authentication service, or create a long-term JWT key in the portal."
      in: header
      name: Authorization
      type: apiKey
x-tagGroups:
- name: Clients
  tags:
  - client
  - Authentication
  - Accepted Senders
  - Announcements
  - App Marketplace
  - Contacts
  - Call Queues
  - Call Queue Agents
  - Chat Rooms
  - Clients
  - Conversations
  - Conversation Messages
  - Conference Rooms
  - Conference Numbers
  - Customers
  - Developer Apps
  - Developer App Subscriptions
  - Directories
  - Domains
  - DNS Records
  - Faxes
  - Fax Accounts
  - Find Numbers
  - Firewall
  - Groups
  - Group Members
  - Holidays
  - Info
  - Invoice Items
  - Invoices
  - Licenses
  - Menus
  - Menu Options
  - Message Campaigns
  - Message Brands
  - Numbers
  - Number Ports
  - Offices
  - Phone Inbound Rules
  - Phone Outbound Rules
  - Phone Inbound Rule Actions
  - Phone Outbound Rule Actions
  - Rate Centers
  - Servers
  - Time Schedules
  - Users
  - User Tokens
  - Virtual Extensions
  - Voicemail

