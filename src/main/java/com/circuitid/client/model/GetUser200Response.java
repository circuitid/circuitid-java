/*
 * Circuit ID REST API
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.22
 * Contact: support@circuitid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.circuitid.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.circuitid.client.model.UsersCommunication;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.circuitid.client.JSON;

/**
 * GetUser200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-01T19:52:01.559Z[UTC]")
public class GetUser200Response {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SIP_PASSWORD = "sipPassword";
  @SerializedName(SERIALIZED_NAME_SIP_PASSWORD)
  private String sipPassword;

  public static final String SERIALIZED_NAME_TURN_PASSWORD = "turnPassword";
  @SerializedName(SERIALIZED_NAME_TURN_PASSWORD)
  private String turnPassword;

  public static final String SERIALIZED_NAME_FIRST = "first";
  @SerializedName(SERIALIZED_NAME_FIRST)
  private String first;

  public static final String SERIALIZED_NAME_LAST = "last";
  @SerializedName(SERIALIZED_NAME_LAST)
  private String last;

  public static final String SERIALIZED_NAME_MOBILE_PHONE = "mobilePhone";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE)
  private String mobilePhone;

  public static final String SERIALIZED_NAME_BUSINESS_PHONE = "businessPhone";
  @SerializedName(SERIALIZED_NAME_BUSINESS_PHONE)
  private String businessPhone;

  public static final String SERIALIZED_NAME_EXTENSION = "extension";
  @SerializedName(SERIALIZED_NAME_EXTENSION)
  private Integer extension;

  public static final String SERIALIZED_NAME_CUSTOM_CALLER_ID = "customCallerId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CALLER_ID)
  private Integer customCallerId;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private String department;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private String office;

  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  /**
   * Gets or Sets language
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
  public enum LanguageEnum {
    FR("fr"),
    
    EN("en"),
    
    JA("ja"),
    
    DE("de"),
    
    ES("es");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language = LanguageEnum.EN;

  /**
   * Gets or Sets isPrimary
   */
  @JsonAdapter(IsPrimaryEnum.Adapter.class)
  public enum IsPrimaryEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    IsPrimaryEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsPrimaryEnum fromValue(Integer value) {
      for (IsPrimaryEnum b : IsPrimaryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsPrimaryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsPrimaryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsPrimaryEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return IsPrimaryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IS_PRIMARY = "isPrimary";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY)
  private IsPrimaryEnum isPrimary = IsPrimaryEnum.NUMBER_0;

  /**
   * Gets or Sets vmGreetingType
   */
  @JsonAdapter(VmGreetingTypeEnum.Adapter.class)
  public enum VmGreetingTypeEnum {
    DEFAULT("default"),
    
    MP3("mp3"),
    
    NUMBER("number");

    private String value;

    VmGreetingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VmGreetingTypeEnum fromValue(String value) {
      for (VmGreetingTypeEnum b : VmGreetingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VmGreetingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VmGreetingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VmGreetingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VmGreetingTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VM_GREETING_TYPE = "vmGreetingType";
  @SerializedName(SERIALIZED_NAME_VM_GREETING_TYPE)
  private VmGreetingTypeEnum vmGreetingType = VmGreetingTypeEnum.DEFAULT;

  public static final String SERIALIZED_NAME_VM_TIMEOUT = "vmTimeout";
  @SerializedName(SERIALIZED_NAME_VM_TIMEOUT)
  private Integer vmTimeout = 20;

  public static final String SERIALIZED_NAME_VM_FILE = "vmFile";
  @SerializedName(SERIALIZED_NAME_VM_FILE)
  private String vmFile;

  public static final String SERIALIZED_NAME_VM_PLAYBACK_NUMBER = "vmPlaybackNumber";
  @SerializedName(SERIALIZED_NAME_VM_PLAYBACK_NUMBER)
  private String vmPlaybackNumber;

  public static final String SERIALIZED_NAME_PIN = "pin";
  @SerializedName(SERIALIZED_NAME_PIN)
  private Integer pin = 1234;

  public static final String SERIALIZED_NAME_NUMBER = "number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_CALLER_ID_NUMBER = "callerIdNumber";
  @SerializedName(SERIALIZED_NAME_CALLER_ID_NUMBER)
  private String callerIdNumber;

  /**
   * Gets or Sets adminPermission
   */
  @JsonAdapter(AdminPermissionEnum.Adapter.class)
  public enum AdminPermissionEnum {
    R("r"),
    
    RW("rw");

    private String value;

    AdminPermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdminPermissionEnum fromValue(String value) {
      for (AdminPermissionEnum b : AdminPermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AdminPermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdminPermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdminPermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdminPermissionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ADMIN_PERMISSION = "adminPermission";
  @SerializedName(SERIALIZED_NAME_ADMIN_PERMISSION)
  private AdminPermissionEnum adminPermission;

  /**
   * Gets or Sets billingPermission
   */
  @JsonAdapter(BillingPermissionEnum.Adapter.class)
  public enum BillingPermissionEnum {
    R("r"),
    
    RW("rw");

    private String value;

    BillingPermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingPermissionEnum fromValue(String value) {
      for (BillingPermissionEnum b : BillingPermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BillingPermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingPermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingPermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BillingPermissionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BILLING_PERMISSION = "billingPermission";
  @SerializedName(SERIALIZED_NAME_BILLING_PERMISSION)
  private BillingPermissionEnum billingPermission;

  /**
   * Gets or Sets phonePermission
   */
  @JsonAdapter(PhonePermissionEnum.Adapter.class)
  public enum PhonePermissionEnum {
    R("r"),
    
    RW("rw");

    private String value;

    PhonePermissionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhonePermissionEnum fromValue(String value) {
      for (PhonePermissionEnum b : PhonePermissionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PhonePermissionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhonePermissionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhonePermissionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhonePermissionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHONE_PERMISSION = "phonePermission";
  @SerializedName(SERIALIZED_NAME_PHONE_PERMISSION)
  private PhonePermissionEnum phonePermission;

  /**
   * Gets or Sets timezone
   */
  @JsonAdapter(TimezoneEnum.Adapter.class)
  public enum TimezoneEnum {
    EUROPE_ANDORRA("Europe/Andorra"),
    
    ASIA_DUBAI("Asia/Dubai"),
    
    ASIA_KABUL("Asia/Kabul"),
    
    EUROPE_TIRANE("Europe/Tirane"),
    
    ASIA_YEREVAN("Asia/Yerevan"),
    
    ANTARCTICA_CASEY("Antarctica/Casey"),
    
    ANTARCTICA_DAVIS("Antarctica/Davis"),
    
    ANTARCTICA_DUMONTDURVILLE("Antarctica/DumontDUrville"),
    
    ANTARCTICA_MAWSON("Antarctica/Mawson"),
    
    ANTARCTICA_PALMER("Antarctica/Palmer"),
    
    ANTARCTICA_ROTHERA("Antarctica/Rothera"),
    
    ANTARCTICA_SYOWA("Antarctica/Syowa"),
    
    ANTARCTICA_TROLL("Antarctica/Troll"),
    
    ANTARCTICA_VOSTOK("Antarctica/Vostok"),
    
    AMERICA_ARGENTINA_BUENOS_AIRES("America/Argentina/Buenos_Aires"),
    
    AMERICA_ARGENTINA_CORDOBA("America/Argentina/Cordoba"),
    
    AMERICA_ARGENTINA_SALTA("America/Argentina/Salta"),
    
    AMERICA_ARGENTINA_JUJUY("America/Argentina/Jujuy"),
    
    AMERICA_ARGENTINA_TUCUMAN("America/Argentina/Tucuman"),
    
    AMERICA_ARGENTINA_CATAMARCA("America/Argentina/Catamarca"),
    
    AMERICA_ARGENTINA_LA_RIOJA("America/Argentina/La_Rioja"),
    
    AMERICA_ARGENTINA_SAN_JUAN("America/Argentina/San_Juan"),
    
    AMERICA_ARGENTINA_MENDOZA("America/Argentina/Mendoza"),
    
    AMERICA_ARGENTINA_SAN_LUIS("America/Argentina/San_Luis"),
    
    AMERICA_ARGENTINA_RIO_GALLEGOS("America/Argentina/Rio_Gallegos"),
    
    AMERICA_ARGENTINA_USHUAIA("America/Argentina/Ushuaia"),
    
    PACIFIC_PAGO_PAGO("Pacific/Pago_Pago"),
    
    EUROPE_VIENNA("Europe/Vienna"),
    
    AUSTRALIA_LORD_HOWE("Australia/Lord_Howe"),
    
    ANTARCTICA_MACQUARIE("Antarctica/Macquarie"),
    
    AUSTRALIA_HOBART("Australia/Hobart"),
    
    AUSTRALIA_CURRIE("Australia/Currie"),
    
    AUSTRALIA_MELBOURNE("Australia/Melbourne"),
    
    AUSTRALIA_SYDNEY("Australia/Sydney"),
    
    AUSTRALIA_BROKEN_HILL("Australia/Broken_Hill"),
    
    AUSTRALIA_BRISBANE("Australia/Brisbane"),
    
    AUSTRALIA_LINDEMAN("Australia/Lindeman"),
    
    AUSTRALIA_ADELAIDE("Australia/Adelaide"),
    
    AUSTRALIA_DARWIN("Australia/Darwin"),
    
    AUSTRALIA_PERTH("Australia/Perth"),
    
    AUSTRALIA_EUCLA("Australia/Eucla"),
    
    ASIA_BAKU("Asia/Baku"),
    
    AMERICA_BARBADOS("America/Barbados"),
    
    ASIA_DHAKA("Asia/Dhaka"),
    
    EUROPE_BRUSSELS("Europe/Brussels"),
    
    EUROPE_SOFIA("Europe/Sofia"),
    
    ATLANTIC_BERMUDA("Atlantic/Bermuda"),
    
    ASIA_BRUNEI("Asia/Brunei"),
    
    AMERICA_LA_PAZ("America/La_Paz"),
    
    AMERICA_NORONHA("America/Noronha"),
    
    AMERICA_BELEM("America/Belem"),
    
    AMERICA_FORTALEZA("America/Fortaleza"),
    
    AMERICA_RECIFE("America/Recife"),
    
    AMERICA_ARAGUAINA("America/Araguaina"),
    
    AMERICA_MACEIO("America/Maceio"),
    
    AMERICA_BAHIA("America/Bahia"),
    
    AMERICA_SAO_PAULO("America/Sao_Paulo"),
    
    AMERICA_CAMPO_GRANDE("America/Campo_Grande"),
    
    AMERICA_CUIABA("America/Cuiaba"),
    
    AMERICA_SANTAREM("America/Santarem"),
    
    AMERICA_PORTO_VELHO("America/Porto_Velho"),
    
    AMERICA_BOA_VISTA("America/Boa_Vista"),
    
    AMERICA_MANAUS("America/Manaus"),
    
    AMERICA_EIRUNEPE("America/Eirunepe"),
    
    AMERICA_RIO_BRANCO("America/Rio_Branco"),
    
    AMERICA_NASSAU("America/Nassau"),
    
    ASIA_THIMPHU("Asia/Thimphu"),
    
    EUROPE_MINSK("Europe/Minsk"),
    
    AMERICA_BELIZE("America/Belize"),
    
    AMERICA_ST_JOHNS("America/St_Johns"),
    
    AMERICA_HALIFAX("America/Halifax"),
    
    AMERICA_GLACE_BAY("America/Glace_Bay"),
    
    AMERICA_MONCTON("America/Moncton"),
    
    AMERICA_GOOSE_BAY("America/Goose_Bay"),
    
    AMERICA_BLANC_SABLON("America/Blanc-Sablon"),
    
    AMERICA_TORONTO("America/Toronto"),
    
    AMERICA_NIPIGON("America/Nipigon"),
    
    AMERICA_THUNDER_BAY("America/Thunder_Bay"),
    
    AMERICA_IQALUIT("America/Iqaluit"),
    
    AMERICA_PANGNIRTUNG("America/Pangnirtung"),
    
    AMERICA_ATIKOKAN("America/Atikokan"),
    
    AMERICA_WINNIPEG("America/Winnipeg"),
    
    AMERICA_RAINY_RIVER("America/Rainy_River"),
    
    AMERICA_RESOLUTE("America/Resolute"),
    
    AMERICA_RANKIN_INLET("America/Rankin_Inlet"),
    
    AMERICA_REGINA("America/Regina"),
    
    AMERICA_SWIFT_CURRENT("America/Swift_Current"),
    
    AMERICA_EDMONTON("America/Edmonton"),
    
    AMERICA_CAMBRIDGE_BAY("America/Cambridge_Bay"),
    
    AMERICA_YELLOWKNIFE("America/Yellowknife"),
    
    AMERICA_INUVIK("America/Inuvik"),
    
    AMERICA_CRESTON("America/Creston"),
    
    AMERICA_DAWSON_CREEK("America/Dawson_Creek"),
    
    AMERICA_FORT_NELSON("America/Fort_Nelson"),
    
    AMERICA_VANCOUVER("America/Vancouver"),
    
    AMERICA_WHITEHORSE("America/Whitehorse"),
    
    AMERICA_DAWSON("America/Dawson"),
    
    INDIAN_COCOS("Indian/Cocos"),
    
    EUROPE_ZURICH("Europe/Zurich"),
    
    AFRICA_ABIDJAN("Africa/Abidjan"),
    
    PACIFIC_RAROTONGA("Pacific/Rarotonga"),
    
    AMERICA_SANTIAGO("America/Santiago"),
    
    AMERICA_PUNTA_ARENAS("America/Punta_Arenas"),
    
    PACIFIC_EASTER("Pacific/Easter"),
    
    ASIA_SHANGHAI("Asia/Shanghai"),
    
    ASIA_URUMQI("Asia/Urumqi"),
    
    AMERICA_BOGOTA("America/Bogota"),
    
    AMERICA_COSTA_RICA("America/Costa_Rica"),
    
    AMERICA_HAVANA("America/Havana"),
    
    ATLANTIC_CAPE_VERDE("Atlantic/Cape_Verde"),
    
    AMERICA_CURACAO("America/Curacao"),
    
    INDIAN_CHRISTMAS("Indian/Christmas"),
    
    ASIA_NICOSIA("Asia/Nicosia"),
    
    ASIA_FAMAGUSTA("Asia/Famagusta"),
    
    EUROPE_PRAGUE("Europe/Prague"),
    
    EUROPE_BERLIN("Europe/Berlin"),
    
    EUROPE_COPENHAGEN("Europe/Copenhagen"),
    
    AMERICA_SANTO_DOMINGO("America/Santo_Domingo"),
    
    AFRICA_ALGIERS("Africa/Algiers"),
    
    AMERICA_GUAYAQUIL("America/Guayaquil"),
    
    PACIFIC_GALAPAGOS("Pacific/Galapagos"),
    
    EUROPE_TALLINN("Europe/Tallinn"),
    
    AFRICA_CAIRO("Africa/Cairo"),
    
    AFRICA_EL_AAIUN("Africa/El_Aaiun"),
    
    EUROPE_MADRID("Europe/Madrid"),
    
    AFRICA_CEUTA("Africa/Ceuta"),
    
    ATLANTIC_CANARY("Atlantic/Canary"),
    
    EUROPE_HELSINKI("Europe/Helsinki"),
    
    PACIFIC_FIJI("Pacific/Fiji"),
    
    ATLANTIC_STANLEY("Atlantic/Stanley"),
    
    PACIFIC_CHUUK("Pacific/Chuuk"),
    
    PACIFIC_POHNPEI("Pacific/Pohnpei"),
    
    PACIFIC_KOSRAE("Pacific/Kosrae"),
    
    ATLANTIC_FAROE("Atlantic/Faroe"),
    
    EUROPE_PARIS("Europe/Paris"),
    
    EUROPE_LONDON("Europe/London"),
    
    ASIA_TBILISI("Asia/Tbilisi"),
    
    AMERICA_CAYENNE("America/Cayenne"),
    
    AFRICA_ACCRA("Africa/Accra"),
    
    EUROPE_GIBRALTAR("Europe/Gibraltar"),
    
    AMERICA_GODTHAB("America/Godthab"),
    
    AMERICA_DANMARKSHAVN("America/Danmarkshavn"),
    
    AMERICA_SCORESBYSUND("America/Scoresbysund"),
    
    AMERICA_THULE("America/Thule"),
    
    EUROPE_ATHENS("Europe/Athens"),
    
    ATLANTIC_SOUTH_GEORGIA("Atlantic/South_Georgia"),
    
    AMERICA_GUATEMALA("America/Guatemala"),
    
    PACIFIC_GUAM("Pacific/Guam"),
    
    AFRICA_BISSAU("Africa/Bissau"),
    
    AMERICA_GUYANA("America/Guyana"),
    
    ASIA_HONG_KONG("Asia/Hong_Kong"),
    
    AMERICA_TEGUCIGALPA("America/Tegucigalpa"),
    
    AMERICA_PORT_AU_PRINCE("America/Port-au-Prince"),
    
    EUROPE_BUDAPEST("Europe/Budapest"),
    
    ASIA_JAKARTA("Asia/Jakarta"),
    
    ASIA_PONTIANAK("Asia/Pontianak"),
    
    ASIA_MAKASSAR("Asia/Makassar"),
    
    ASIA_JAYAPURA("Asia/Jayapura"),
    
    EUROPE_DUBLIN("Europe/Dublin"),
    
    ASIA_JERUSALEM("Asia/Jerusalem"),
    
    ASIA_KOLKATA("Asia/Kolkata"),
    
    INDIAN_CHAGOS("Indian/Chagos"),
    
    ASIA_BAGHDAD("Asia/Baghdad"),
    
    ASIA_TEHRAN("Asia/Tehran"),
    
    ATLANTIC_REYKJAVIK("Atlantic/Reykjavik"),
    
    EUROPE_ROME("Europe/Rome"),
    
    AMERICA_JAMAICA("America/Jamaica"),
    
    ASIA_AMMAN("Asia/Amman"),
    
    ASIA_TOKYO("Asia/Tokyo"),
    
    AFRICA_NAIROBI("Africa/Nairobi"),
    
    ASIA_BISHKEK("Asia/Bishkek"),
    
    PACIFIC_TARAWA("Pacific/Tarawa"),
    
    PACIFIC_ENDERBURY("Pacific/Enderbury"),
    
    PACIFIC_KIRITIMATI("Pacific/Kiritimati"),
    
    ASIA_PYONGYANG("Asia/Pyongyang"),
    
    ASIA_SEOUL("Asia/Seoul"),
    
    ASIA_ALMATY("Asia/Almaty"),
    
    ASIA_QYZYLORDA("Asia/Qyzylorda"),
    
    ASIA_QOSTANAY("Asia/Qostanay"),
    
    ASIA_AQTOBE("Asia/Aqtobe"),
    
    ASIA_AQTAU("Asia/Aqtau"),
    
    ASIA_ATYRAU("Asia/Atyrau"),
    
    ASIA_ORAL("Asia/Oral"),
    
    ASIA_BEIRUT("Asia/Beirut"),
    
    ASIA_COLOMBO("Asia/Colombo"),
    
    AFRICA_MONROVIA("Africa/Monrovia"),
    
    EUROPE_VILNIUS("Europe/Vilnius"),
    
    EUROPE_LUXEMBOURG("Europe/Luxembourg"),
    
    EUROPE_RIGA("Europe/Riga"),
    
    AFRICA_TRIPOLI("Africa/Tripoli"),
    
    AFRICA_CASABLANCA("Africa/Casablanca"),
    
    EUROPE_MONACO("Europe/Monaco"),
    
    EUROPE_CHISINAU("Europe/Chisinau"),
    
    PACIFIC_MAJURO("Pacific/Majuro"),
    
    PACIFIC_KWAJALEIN("Pacific/Kwajalein"),
    
    ASIA_YANGON("Asia/Yangon"),
    
    ASIA_ULAANBAATAR("Asia/Ulaanbaatar"),
    
    ASIA_HOVD("Asia/Hovd"),
    
    ASIA_CHOIBALSAN("Asia/Choibalsan"),
    
    ASIA_MACAU("Asia/Macau"),
    
    AMERICA_MARTINIQUE("America/Martinique"),
    
    EUROPE_MALTA("Europe/Malta"),
    
    INDIAN_MAURITIUS("Indian/Mauritius"),
    
    INDIAN_MALDIVES("Indian/Maldives"),
    
    AMERICA_MEXICO_CITY("America/Mexico_City"),
    
    AMERICA_CANCUN("America/Cancun"),
    
    AMERICA_MERIDA("America/Merida"),
    
    AMERICA_MONTERREY("America/Monterrey"),
    
    AMERICA_MATAMOROS("America/Matamoros"),
    
    AMERICA_MAZATLAN("America/Mazatlan"),
    
    AMERICA_CHIHUAHUA("America/Chihuahua"),
    
    AMERICA_OJINAGA("America/Ojinaga"),
    
    AMERICA_HERMOSILLO("America/Hermosillo"),
    
    AMERICA_TIJUANA("America/Tijuana"),
    
    AMERICA_BAHIA_BANDERAS("America/Bahia_Banderas"),
    
    ASIA_KUALA_LUMPUR("Asia/Kuala_Lumpur"),
    
    ASIA_KUCHING("Asia/Kuching"),
    
    AFRICA_MAPUTO("Africa/Maputo"),
    
    AFRICA_WINDHOEK("Africa/Windhoek"),
    
    PACIFIC_NOUMEA("Pacific/Noumea"),
    
    PACIFIC_NORFOLK("Pacific/Norfolk"),
    
    AFRICA_LAGOS("Africa/Lagos"),
    
    AMERICA_MANAGUA("America/Managua"),
    
    EUROPE_AMSTERDAM("Europe/Amsterdam"),
    
    EUROPE_OSLO("Europe/Oslo"),
    
    ASIA_KATHMANDU("Asia/Kathmandu"),
    
    PACIFIC_NAURU("Pacific/Nauru"),
    
    PACIFIC_NIUE("Pacific/Niue"),
    
    PACIFIC_AUCKLAND("Pacific/Auckland"),
    
    PACIFIC_CHATHAM("Pacific/Chatham"),
    
    AMERICA_PANAMA("America/Panama"),
    
    AMERICA_LIMA("America/Lima"),
    
    PACIFIC_TAHITI("Pacific/Tahiti"),
    
    PACIFIC_MARQUESAS("Pacific/Marquesas"),
    
    PACIFIC_GAMBIER("Pacific/Gambier"),
    
    PACIFIC_PORT_MORESBY("Pacific/Port_Moresby"),
    
    PACIFIC_BOUGAINVILLE("Pacific/Bougainville"),
    
    ASIA_MANILA("Asia/Manila"),
    
    ASIA_KARACHI("Asia/Karachi"),
    
    EUROPE_WARSAW("Europe/Warsaw"),
    
    AMERICA_MIQUELON("America/Miquelon"),
    
    PACIFIC_PITCAIRN("Pacific/Pitcairn"),
    
    AMERICA_PUERTO_RICO("America/Puerto_Rico"),
    
    ASIA_GAZA("Asia/Gaza"),
    
    ASIA_HEBRON("Asia/Hebron"),
    
    EUROPE_LISBON("Europe/Lisbon"),
    
    ATLANTIC_MADEIRA("Atlantic/Madeira"),
    
    ATLANTIC_AZORES("Atlantic/Azores"),
    
    PACIFIC_PALAU("Pacific/Palau"),
    
    AMERICA_ASUNCION("America/Asuncion"),
    
    ASIA_QATAR("Asia/Qatar"),
    
    INDIAN_REUNION("Indian/Reunion"),
    
    EUROPE_BUCHAREST("Europe/Bucharest"),
    
    EUROPE_BELGRADE("Europe/Belgrade"),
    
    EUROPE_KALININGRAD("Europe/Kaliningrad"),
    
    EUROPE_MOSCOW("Europe/Moscow"),
    
    EUROPE_SIMFEROPOL("Europe/Simferopol"),
    
    EUROPE_KIROV("Europe/Kirov"),
    
    EUROPE_ASTRAKHAN("Europe/Astrakhan"),
    
    EUROPE_VOLGOGRAD("Europe/Volgograd"),
    
    EUROPE_SARATOV("Europe/Saratov"),
    
    EUROPE_ULYANOVSK("Europe/Ulyanovsk"),
    
    EUROPE_SAMARA("Europe/Samara"),
    
    ASIA_YEKATERINBURG("Asia/Yekaterinburg"),
    
    ASIA_OMSK("Asia/Omsk"),
    
    ASIA_NOVOSIBIRSK("Asia/Novosibirsk"),
    
    ASIA_BARNAUL("Asia/Barnaul"),
    
    ASIA_TOMSK("Asia/Tomsk"),
    
    ASIA_NOVOKUZNETSK("Asia/Novokuznetsk"),
    
    ASIA_KRASNOYARSK("Asia/Krasnoyarsk"),
    
    ASIA_IRKUTSK("Asia/Irkutsk"),
    
    ASIA_CHITA("Asia/Chita"),
    
    ASIA_YAKUTSK("Asia/Yakutsk"),
    
    ASIA_KHANDYGA("Asia/Khandyga"),
    
    ASIA_VLADIVOSTOK("Asia/Vladivostok"),
    
    ASIA_UST_NERA("Asia/Ust-Nera"),
    
    ASIA_MAGADAN("Asia/Magadan"),
    
    ASIA_SAKHALIN("Asia/Sakhalin"),
    
    ASIA_SREDNEKOLYMSK("Asia/Srednekolymsk"),
    
    ASIA_KAMCHATKA("Asia/Kamchatka"),
    
    ASIA_ANADYR("Asia/Anadyr"),
    
    ASIA_RIYADH("Asia/Riyadh"),
    
    PACIFIC_GUADALCANAL("Pacific/Guadalcanal"),
    
    INDIAN_MAHE("Indian/Mahe"),
    
    AFRICA_KHARTOUM("Africa/Khartoum"),
    
    EUROPE_STOCKHOLM("Europe/Stockholm"),
    
    ASIA_SINGAPORE("Asia/Singapore"),
    
    AMERICA_PARAMARIBO("America/Paramaribo"),
    
    AFRICA_JUBA("Africa/Juba"),
    
    AFRICA_SAO_TOME("Africa/Sao_Tome"),
    
    AMERICA_EL_SALVADOR("America/El_Salvador"),
    
    ASIA_DAMASCUS("Asia/Damascus"),
    
    AMERICA_GRAND_TURK("America/Grand_Turk"),
    
    AFRICA_NDJAMENA("Africa/Ndjamena"),
    
    INDIAN_KERGUELEN("Indian/Kerguelen"),
    
    ASIA_BANGKOK("Asia/Bangkok"),
    
    ASIA_DUSHANBE("Asia/Dushanbe"),
    
    PACIFIC_FAKAOFO("Pacific/Fakaofo"),
    
    ASIA_DILI("Asia/Dili"),
    
    ASIA_ASHGABAT("Asia/Ashgabat"),
    
    AFRICA_TUNIS("Africa/Tunis"),
    
    PACIFIC_TONGATAPU("Pacific/Tongatapu"),
    
    EUROPE_ISTANBUL("Europe/Istanbul"),
    
    AMERICA_PORT_OF_SPAIN("America/Port_of_Spain"),
    
    PACIFIC_FUNAFUTI("Pacific/Funafuti"),
    
    ASIA_TAIPEI("Asia/Taipei"),
    
    EUROPE_KIEV("Europe/Kiev"),
    
    EUROPE_UZHGOROD("Europe/Uzhgorod"),
    
    EUROPE_ZAPOROZHYE("Europe/Zaporozhye"),
    
    PACIFIC_WAKE("Pacific/Wake"),
    
    AMERICA_NEW_YORK("America/New_York"),
    
    AMERICA_DETROIT("America/Detroit"),
    
    AMERICA_KENTUCKY_LOUISVILLE("America/Kentucky/Louisville"),
    
    AMERICA_KENTUCKY_MONTICELLO("America/Kentucky/Monticello"),
    
    AMERICA_INDIANA_INDIANAPOLIS("America/Indiana/Indianapolis"),
    
    AMERICA_INDIANA_VINCENNES("America/Indiana/Vincennes"),
    
    AMERICA_INDIANA_WINAMAC("America/Indiana/Winamac"),
    
    AMERICA_INDIANA_MARENGO("America/Indiana/Marengo"),
    
    AMERICA_INDIANA_PETERSBURG("America/Indiana/Petersburg"),
    
    AMERICA_INDIANA_VEVAY("America/Indiana/Vevay"),
    
    AMERICA_CHICAGO("America/Chicago"),
    
    AMERICA_INDIANA_TELL_CITY("America/Indiana/Tell_City"),
    
    AMERICA_INDIANA_KNOX("America/Indiana/Knox"),
    
    AMERICA_MENOMINEE("America/Menominee"),
    
    AMERICA_NORTH_DAKOTA_CENTER("America/North_Dakota/Center"),
    
    AMERICA_NORTH_DAKOTA_NEW_SALEM("America/North_Dakota/New_Salem"),
    
    AMERICA_NORTH_DAKOTA_BEULAH("America/North_Dakota/Beulah"),
    
    AMERICA_DENVER("America/Denver"),
    
    AMERICA_BOISE("America/Boise"),
    
    AMERICA_PHOENIX("America/Phoenix"),
    
    AMERICA_LOS_ANGELES("America/Los_Angeles"),
    
    AMERICA_ANCHORAGE("America/Anchorage"),
    
    AMERICA_JUNEAU("America/Juneau"),
    
    AMERICA_SITKA("America/Sitka"),
    
    AMERICA_METLAKATLA("America/Metlakatla"),
    
    AMERICA_YAKUTAT("America/Yakutat"),
    
    AMERICA_NOME("America/Nome"),
    
    AMERICA_ADAK("America/Adak"),
    
    PACIFIC_HONOLULU("Pacific/Honolulu"),
    
    AMERICA_MONTEVIDEO("America/Montevideo"),
    
    ASIA_SAMARKAND("Asia/Samarkand"),
    
    ASIA_TASHKENT("Asia/Tashkent"),
    
    AMERICA_CARACAS("America/Caracas"),
    
    ASIA_HO_CHI_MINH("Asia/Ho_Chi_Minh"),
    
    PACIFIC_EFATE("Pacific/Efate"),
    
    PACIFIC_WALLIS("Pacific/Wallis"),
    
    PACIFIC_APIA("Pacific/Apia"),
    
    AFRICA_JOHANNESBURG("Africa/Johannesburg");

    private String value;

    TimezoneEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimezoneEnum fromValue(String value) {
      for (TimezoneEnum b : TimezoneEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimezoneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimezoneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimezoneEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimezoneEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private TimezoneEnum timezone = TimezoneEnum.AMERICA_NEW_YORK;

  /**
   * Gets or Sets vmTranscription
   */
  @JsonAdapter(VmTranscriptionEnum.Adapter.class)
  public enum VmTranscriptionEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    VmTranscriptionEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VmTranscriptionEnum fromValue(Integer value) {
      for (VmTranscriptionEnum b : VmTranscriptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VmTranscriptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VmTranscriptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VmTranscriptionEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return VmTranscriptionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VM_TRANSCRIPTION = "vmTranscription";
  @SerializedName(SERIALIZED_NAME_VM_TRANSCRIPTION)
  private VmTranscriptionEnum vmTranscription = VmTranscriptionEnum.NUMBER_0;

  public static final String SERIALIZED_NAME_COMMUNICATION = "communication";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION)
  private UsersCommunication communication = {"notifications":{"email":true,"sms":true,"sound":true},"missedCalls":{"email":true,"sms":true,"sound":true},"callRecordings":{"email":true,"sms":true,"sound":true},"newsletters":{"email":true,"sms":true,"sound":true},"voicemails":{"email":true,"sms":true,"sound":true},"web":{"sounds":true}};

  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CREATED_BY_USER_ID = "createdByUserId";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_USER_ID)
  private String createdByUserId;

  public static final String SERIALIZED_NAME_UPDATED_BY_USER_ID = "updatedByUserId";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY_USER_ID)
  private String updatedByUserId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public GetUser200Response() {
  }

  public GetUser200Response email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public GetUser200Response password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public GetUser200Response sipPassword(String sipPassword) {
    
    this.sipPassword = sipPassword;
    return this;
  }

   /**
   * Get sipPassword
   * @return sipPassword
  **/
  @javax.annotation.Nonnull
  public String getSipPassword() {
    return sipPassword;
  }


  public void setSipPassword(String sipPassword) {
    this.sipPassword = sipPassword;
  }


  public GetUser200Response turnPassword(String turnPassword) {
    
    this.turnPassword = turnPassword;
    return this;
  }

   /**
   * Get turnPassword
   * @return turnPassword
  **/
  @javax.annotation.Nullable
  public String getTurnPassword() {
    return turnPassword;
  }


  public void setTurnPassword(String turnPassword) {
    this.turnPassword = turnPassword;
  }


  public GetUser200Response first(String first) {
    
    this.first = first;
    return this;
  }

   /**
   * Get first
   * @return first
  **/
  @javax.annotation.Nonnull
  public String getFirst() {
    return first;
  }


  public void setFirst(String first) {
    this.first = first;
  }


  public GetUser200Response last(String last) {
    
    this.last = last;
    return this;
  }

   /**
   * Get last
   * @return last
  **/
  @javax.annotation.Nonnull
  public String getLast() {
    return last;
  }


  public void setLast(String last) {
    this.last = last;
  }


  public GetUser200Response mobilePhone(String mobilePhone) {
    
    this.mobilePhone = mobilePhone;
    return this;
  }

   /**
   * Get mobilePhone
   * @return mobilePhone
  **/
  @javax.annotation.Nullable
  public String getMobilePhone() {
    return mobilePhone;
  }


  public void setMobilePhone(String mobilePhone) {
    this.mobilePhone = mobilePhone;
  }


  public GetUser200Response businessPhone(String businessPhone) {
    
    this.businessPhone = businessPhone;
    return this;
  }

   /**
   * Get businessPhone
   * @return businessPhone
  **/
  @javax.annotation.Nullable
  public String getBusinessPhone() {
    return businessPhone;
  }


  public void setBusinessPhone(String businessPhone) {
    this.businessPhone = businessPhone;
  }


  public GetUser200Response extension(Integer extension) {
    
    this.extension = extension;
    return this;
  }

   /**
   * Get extension
   * @return extension
  **/
  @javax.annotation.Nullable
  public Integer getExtension() {
    return extension;
  }


  public void setExtension(Integer extension) {
    this.extension = extension;
  }


  public GetUser200Response customCallerId(Integer customCallerId) {
    
    this.customCallerId = customCallerId;
    return this;
  }

   /**
   * Get customCallerId
   * @return customCallerId
  **/
  @javax.annotation.Nullable
  public Integer getCustomCallerId() {
    return customCallerId;
  }


  public void setCustomCallerId(Integer customCallerId) {
    this.customCallerId = customCallerId;
  }


  public GetUser200Response jobTitle(String jobTitle) {
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public GetUser200Response department(String department) {
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nullable
  public String getDepartment() {
    return department;
  }


  public void setDepartment(String department) {
    this.department = department;
  }


  public GetUser200Response office(String office) {
    
    this.office = office;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return office
  **/
  @javax.annotation.Nullable
  public String getOffice() {
    return office;
  }


  public void setOffice(String office) {
    this.office = office;
  }


  public GetUser200Response avatar(String avatar) {
    
    this.avatar = avatar;
    return this;
  }

   /**
   * Get avatar
   * @return avatar
  **/
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }


  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public GetUser200Response language(LanguageEnum language) {
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nullable
  public LanguageEnum getLanguage() {
    return language;
  }


  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public GetUser200Response isPrimary(IsPrimaryEnum isPrimary) {
    
    this.isPrimary = isPrimary;
    return this;
  }

   /**
   * Get isPrimary
   * @return isPrimary
  **/
  @javax.annotation.Nullable
  public IsPrimaryEnum getIsPrimary() {
    return isPrimary;
  }


  public void setIsPrimary(IsPrimaryEnum isPrimary) {
    this.isPrimary = isPrimary;
  }


  public GetUser200Response vmGreetingType(VmGreetingTypeEnum vmGreetingType) {
    
    this.vmGreetingType = vmGreetingType;
    return this;
  }

   /**
   * Get vmGreetingType
   * @return vmGreetingType
  **/
  @javax.annotation.Nullable
  public VmGreetingTypeEnum getVmGreetingType() {
    return vmGreetingType;
  }


  public void setVmGreetingType(VmGreetingTypeEnum vmGreetingType) {
    this.vmGreetingType = vmGreetingType;
  }


  public GetUser200Response vmTimeout(Integer vmTimeout) {
    
    this.vmTimeout = vmTimeout;
    return this;
  }

   /**
   * Get vmTimeout
   * @return vmTimeout
  **/
  @javax.annotation.Nullable
  public Integer getVmTimeout() {
    return vmTimeout;
  }


  public void setVmTimeout(Integer vmTimeout) {
    this.vmTimeout = vmTimeout;
  }


  public GetUser200Response vmFile(String vmFile) {
    
    this.vmFile = vmFile;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return vmFile
  **/
  @javax.annotation.Nullable
  public String getVmFile() {
    return vmFile;
  }


  public void setVmFile(String vmFile) {
    this.vmFile = vmFile;
  }


  public GetUser200Response vmPlaybackNumber(String vmPlaybackNumber) {
    
    this.vmPlaybackNumber = vmPlaybackNumber;
    return this;
  }

   /**
   * Get vmPlaybackNumber
   * @return vmPlaybackNumber
  **/
  @javax.annotation.Nullable
  public String getVmPlaybackNumber() {
    return vmPlaybackNumber;
  }


  public void setVmPlaybackNumber(String vmPlaybackNumber) {
    this.vmPlaybackNumber = vmPlaybackNumber;
  }


  public GetUser200Response pin(Integer pin) {
    
    this.pin = pin;
    return this;
  }

   /**
   * Get pin
   * @return pin
  **/
  @javax.annotation.Nullable
  public Integer getPin() {
    return pin;
  }


  public void setPin(Integer pin) {
    this.pin = pin;
  }


  public GetUser200Response number(String number) {
    
    this.number = number;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return number
  **/
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    this.number = number;
  }


  public GetUser200Response region(String region) {
    
    this.region = region;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return region
  **/
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    this.region = region;
  }


  public GetUser200Response callerIdNumber(String callerIdNumber) {
    
    this.callerIdNumber = callerIdNumber;
    return this;
  }

   /**
   * Get callerIdNumber
   * @return callerIdNumber
  **/
  @javax.annotation.Nullable
  public String getCallerIdNumber() {
    return callerIdNumber;
  }


  public void setCallerIdNumber(String callerIdNumber) {
    this.callerIdNumber = callerIdNumber;
  }


  public GetUser200Response adminPermission(AdminPermissionEnum adminPermission) {
    
    this.adminPermission = adminPermission;
    return this;
  }

   /**
   * Get adminPermission
   * @return adminPermission
  **/
  @javax.annotation.Nullable
  public AdminPermissionEnum getAdminPermission() {
    return adminPermission;
  }


  public void setAdminPermission(AdminPermissionEnum adminPermission) {
    this.adminPermission = adminPermission;
  }


  public GetUser200Response billingPermission(BillingPermissionEnum billingPermission) {
    
    this.billingPermission = billingPermission;
    return this;
  }

   /**
   * Get billingPermission
   * @return billingPermission
  **/
  @javax.annotation.Nullable
  public BillingPermissionEnum getBillingPermission() {
    return billingPermission;
  }


  public void setBillingPermission(BillingPermissionEnum billingPermission) {
    this.billingPermission = billingPermission;
  }


  public GetUser200Response phonePermission(PhonePermissionEnum phonePermission) {
    
    this.phonePermission = phonePermission;
    return this;
  }

   /**
   * Get phonePermission
   * @return phonePermission
  **/
  @javax.annotation.Nullable
  public PhonePermissionEnum getPhonePermission() {
    return phonePermission;
  }


  public void setPhonePermission(PhonePermissionEnum phonePermission) {
    this.phonePermission = phonePermission;
  }


  public GetUser200Response timezone(TimezoneEnum timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @javax.annotation.Nonnull
  public TimezoneEnum getTimezone() {
    return timezone;
  }


  public void setTimezone(TimezoneEnum timezone) {
    this.timezone = timezone;
  }


  public GetUser200Response vmTranscription(VmTranscriptionEnum vmTranscription) {
    
    this.vmTranscription = vmTranscription;
    return this;
  }

   /**
   * Get vmTranscription
   * @return vmTranscription
  **/
  @javax.annotation.Nullable
  public VmTranscriptionEnum getVmTranscription() {
    return vmTranscription;
  }


  public void setVmTranscription(VmTranscriptionEnum vmTranscription) {
    this.vmTranscription = vmTranscription;
  }


  public GetUser200Response communication(UsersCommunication communication) {
    
    this.communication = communication;
    return this;
  }

   /**
   * Get communication
   * @return communication
  **/
  @javax.annotation.Nullable
  public UsersCommunication getCommunication() {
    return communication;
  }


  public void setCommunication(UsersCommunication communication) {
    this.communication = communication;
  }


  public GetUser200Response id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public GetUser200Response createdByUserId(String createdByUserId) {
    
    this.createdByUserId = createdByUserId;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return createdByUserId
  **/
  @javax.annotation.Nullable
  public String getCreatedByUserId() {
    return createdByUserId;
  }


  public void setCreatedByUserId(String createdByUserId) {
    this.createdByUserId = createdByUserId;
  }


  public GetUser200Response updatedByUserId(String updatedByUserId) {
    
    this.updatedByUserId = updatedByUserId;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return updatedByUserId
  **/
  @javax.annotation.Nullable
  public String getUpdatedByUserId() {
    return updatedByUserId;
  }


  public void setUpdatedByUserId(String updatedByUserId) {
    this.updatedByUserId = updatedByUserId;
  }


  public GetUser200Response createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public GetUser200Response updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetUser200Response getUser200Response = (GetUser200Response) o;
    return Objects.equals(this.email, getUser200Response.email) &&
        Objects.equals(this.password, getUser200Response.password) &&
        Objects.equals(this.sipPassword, getUser200Response.sipPassword) &&
        Objects.equals(this.turnPassword, getUser200Response.turnPassword) &&
        Objects.equals(this.first, getUser200Response.first) &&
        Objects.equals(this.last, getUser200Response.last) &&
        Objects.equals(this.mobilePhone, getUser200Response.mobilePhone) &&
        Objects.equals(this.businessPhone, getUser200Response.businessPhone) &&
        Objects.equals(this.extension, getUser200Response.extension) &&
        Objects.equals(this.customCallerId, getUser200Response.customCallerId) &&
        Objects.equals(this.jobTitle, getUser200Response.jobTitle) &&
        Objects.equals(this.department, getUser200Response.department) &&
        Objects.equals(this.office, getUser200Response.office) &&
        Objects.equals(this.avatar, getUser200Response.avatar) &&
        Objects.equals(this.language, getUser200Response.language) &&
        Objects.equals(this.isPrimary, getUser200Response.isPrimary) &&
        Objects.equals(this.vmGreetingType, getUser200Response.vmGreetingType) &&
        Objects.equals(this.vmTimeout, getUser200Response.vmTimeout) &&
        Objects.equals(this.vmFile, getUser200Response.vmFile) &&
        Objects.equals(this.vmPlaybackNumber, getUser200Response.vmPlaybackNumber) &&
        Objects.equals(this.pin, getUser200Response.pin) &&
        Objects.equals(this.number, getUser200Response.number) &&
        Objects.equals(this.region, getUser200Response.region) &&
        Objects.equals(this.callerIdNumber, getUser200Response.callerIdNumber) &&
        Objects.equals(this.adminPermission, getUser200Response.adminPermission) &&
        Objects.equals(this.billingPermission, getUser200Response.billingPermission) &&
        Objects.equals(this.phonePermission, getUser200Response.phonePermission) &&
        Objects.equals(this.timezone, getUser200Response.timezone) &&
        Objects.equals(this.vmTranscription, getUser200Response.vmTranscription) &&
        Objects.equals(this.communication, getUser200Response.communication) &&
        Objects.equals(this.id, getUser200Response.id) &&
        Objects.equals(this.createdByUserId, getUser200Response.createdByUserId) &&
        Objects.equals(this.updatedByUserId, getUser200Response.updatedByUserId) &&
        Objects.equals(this.createdAt, getUser200Response.createdAt) &&
        Objects.equals(this.updatedAt, getUser200Response.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, password, sipPassword, turnPassword, first, last, mobilePhone, businessPhone, extension, customCallerId, jobTitle, department, office, avatar, language, isPrimary, vmGreetingType, vmTimeout, vmFile, vmPlaybackNumber, pin, number, region, callerIdNumber, adminPermission, billingPermission, phonePermission, timezone, vmTranscription, communication, id, createdByUserId, updatedByUserId, createdAt, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetUser200Response {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    sipPassword: ").append(toIndentedString(sipPassword)).append("\n");
    sb.append("    turnPassword: ").append(toIndentedString(turnPassword)).append("\n");
    sb.append("    first: ").append(toIndentedString(first)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    businessPhone: ").append(toIndentedString(businessPhone)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    customCallerId: ").append(toIndentedString(customCallerId)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    isPrimary: ").append(toIndentedString(isPrimary)).append("\n");
    sb.append("    vmGreetingType: ").append(toIndentedString(vmGreetingType)).append("\n");
    sb.append("    vmTimeout: ").append(toIndentedString(vmTimeout)).append("\n");
    sb.append("    vmFile: ").append(toIndentedString(vmFile)).append("\n");
    sb.append("    vmPlaybackNumber: ").append(toIndentedString(vmPlaybackNumber)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    callerIdNumber: ").append(toIndentedString(callerIdNumber)).append("\n");
    sb.append("    adminPermission: ").append(toIndentedString(adminPermission)).append("\n");
    sb.append("    billingPermission: ").append(toIndentedString(billingPermission)).append("\n");
    sb.append("    phonePermission: ").append(toIndentedString(phonePermission)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    vmTranscription: ").append(toIndentedString(vmTranscription)).append("\n");
    sb.append("    communication: ").append(toIndentedString(communication)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdByUserId: ").append(toIndentedString(createdByUserId)).append("\n");
    sb.append("    updatedByUserId: ").append(toIndentedString(updatedByUserId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("password");
    openapiFields.add("sipPassword");
    openapiFields.add("turnPassword");
    openapiFields.add("first");
    openapiFields.add("last");
    openapiFields.add("mobilePhone");
    openapiFields.add("businessPhone");
    openapiFields.add("extension");
    openapiFields.add("customCallerId");
    openapiFields.add("jobTitle");
    openapiFields.add("department");
    openapiFields.add("office");
    openapiFields.add("avatar");
    openapiFields.add("language");
    openapiFields.add("isPrimary");
    openapiFields.add("vmGreetingType");
    openapiFields.add("vmTimeout");
    openapiFields.add("vmFile");
    openapiFields.add("vmPlaybackNumber");
    openapiFields.add("pin");
    openapiFields.add("number");
    openapiFields.add("region");
    openapiFields.add("callerIdNumber");
    openapiFields.add("adminPermission");
    openapiFields.add("billingPermission");
    openapiFields.add("phonePermission");
    openapiFields.add("timezone");
    openapiFields.add("vmTranscription");
    openapiFields.add("communication");
    openapiFields.add("_id");
    openapiFields.add("createdByUserId");
    openapiFields.add("updatedByUserId");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("sipPassword");
    openapiRequiredFields.add("first");
    openapiRequiredFields.add("last");
    openapiRequiredFields.add("timezone");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetUser200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetUser200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetUser200Response is not found in the empty JSON string", GetUser200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GetUser200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetUser200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetUser200Response.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("sipPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sipPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sipPassword").toString()));
      }
      if ((jsonObj.get("turnPassword") != null && !jsonObj.get("turnPassword").isJsonNull()) && !jsonObj.get("turnPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `turnPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("turnPassword").toString()));
      }
      if (!jsonObj.get("first").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first").toString()));
      }
      if (!jsonObj.get("last").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last").toString()));
      }
      if ((jsonObj.get("mobilePhone") != null && !jsonObj.get("mobilePhone").isJsonNull()) && !jsonObj.get("mobilePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhone").toString()));
      }
      if ((jsonObj.get("businessPhone") != null && !jsonObj.get("businessPhone").isJsonNull()) && !jsonObj.get("businessPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessPhone").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      if ((jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) && !jsonObj.get("department").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `department` to be a primitive type in the JSON string but got `%s`", jsonObj.get("department").toString()));
      }
      if ((jsonObj.get("office") != null && !jsonObj.get("office").isJsonNull()) && !jsonObj.get("office").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `office` to be a primitive type in the JSON string but got `%s`", jsonObj.get("office").toString()));
      }
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("vmGreetingType") != null && !jsonObj.get("vmGreetingType").isJsonNull()) && !jsonObj.get("vmGreetingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmGreetingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmGreetingType").toString()));
      }
      if ((jsonObj.get("vmFile") != null && !jsonObj.get("vmFile").isJsonNull()) && !jsonObj.get("vmFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmFile").toString()));
      }
      if ((jsonObj.get("vmPlaybackNumber") != null && !jsonObj.get("vmPlaybackNumber").isJsonNull()) && !jsonObj.get("vmPlaybackNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmPlaybackNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmPlaybackNumber").toString()));
      }
      if ((jsonObj.get("number") != null && !jsonObj.get("number").isJsonNull()) && !jsonObj.get("number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("callerIdNumber") != null && !jsonObj.get("callerIdNumber").isJsonNull()) && !jsonObj.get("callerIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerIdNumber").toString()));
      }
      if ((jsonObj.get("adminPermission") != null && !jsonObj.get("adminPermission").isJsonNull()) && !jsonObj.get("adminPermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminPermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminPermission").toString()));
      }
      if ((jsonObj.get("billingPermission") != null && !jsonObj.get("billingPermission").isJsonNull()) && !jsonObj.get("billingPermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPermission").toString()));
      }
      if ((jsonObj.get("phonePermission") != null && !jsonObj.get("phonePermission").isJsonNull()) && !jsonObj.get("phonePermission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phonePermission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phonePermission").toString()));
      }
      if (!jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
      // validate the optional field `communication`
      if (jsonObj.get("communication") != null && !jsonObj.get("communication").isJsonNull()) {
        UsersCommunication.validateJsonObject(jsonObj.getAsJsonObject("communication"));
      }
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("createdByUserId") != null && !jsonObj.get("createdByUserId").isJsonNull()) && !jsonObj.get("createdByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdByUserId").toString()));
      }
      if ((jsonObj.get("updatedByUserId") != null && !jsonObj.get("updatedByUserId").isJsonNull()) && !jsonObj.get("updatedByUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updatedByUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updatedByUserId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetUser200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetUser200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetUser200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetUser200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetUser200Response>() {
           @Override
           public void write(JsonWriter out, GetUser200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetUser200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetUser200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetUser200Response
  * @throws IOException if the JSON string is invalid with respect to GetUser200Response
  */
  public static GetUser200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetUser200Response.class);
  }

 /**
  * Convert an instance of GetUser200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

