/*
 * Circuit ID REST API
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.17
 * Contact: support@circuitid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.circuitid.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.circuitid.client.JSON;

/**
 * Numberports
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-25T10:32:07.025Z[UTC]")
public class Numberports {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Object name = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Object type = null;

  public static final String SERIALIZED_NAME_TYPE_OF_SERVICE = "typeOfService";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_SERVICE)
  private Object typeOfService = null;

  public static final String SERIALIZED_NAME_AUTHORIZED_PERSON = "authorizedPerson";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_PERSON)
  private Object authorizedPerson = null;

  public static final String SERIALIZED_NAME_DESIRED_DUE_DATE = "desiredDueDate";
  @SerializedName(SERIALIZED_NAME_DESIRED_DUE_DATE)
  private Object desiredDueDate = null;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private Object accountNumber = null;

  public static final String SERIALIZED_NAME_ACCOUNT_PHONE_NUMBER = "accountPhoneNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_PHONE_NUMBER)
  private Object accountPhoneNumber = null;

  public static final String SERIALIZED_NAME_OFFICE = "office";
  @SerializedName(SERIALIZED_NAME_OFFICE)
  private Object office = null;

  public static final String SERIALIZED_NAME_E911 = "e911";
  @SerializedName(SERIALIZED_NAME_E911)
  private Object e911 = 0;

  public static final String SERIALIZED_NAME_INVOICE = "invoice";
  @SerializedName(SERIALIZED_NAME_INVOICE)
  private Object invoice = null;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Object status = processing;

  public static final String SERIALIZED_NAME_DESTINATION_TYPE = "destinationType";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE)
  private Object destinationType = null;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private Object destination = null;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private Object ref = null;

  public static final String SERIALIZED_NAME_CALL_FORWARDING_DESTINATION = "callForwardingDestination";
  @SerializedName(SERIALIZED_NAME_CALL_FORWARDING_DESTINATION)
  private Object callForwardingDestination = null;

  public Numberports() {
  }

  public Numberports name(Object name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public Object getName() {
    return name;
  }


  public void setName(Object name) {
    this.name = name;
  }


  public Numberports type(Object type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public Object getType() {
    return type;
  }


  public void setType(Object type) {
    this.type = type;
  }


  public Numberports typeOfService(Object typeOfService) {
    
    this.typeOfService = typeOfService;
    return this;
  }

   /**
   * Get typeOfService
   * @return typeOfService
  **/
  @javax.annotation.Nullable
  public Object getTypeOfService() {
    return typeOfService;
  }


  public void setTypeOfService(Object typeOfService) {
    this.typeOfService = typeOfService;
  }


  public Numberports authorizedPerson(Object authorizedPerson) {
    
    this.authorizedPerson = authorizedPerson;
    return this;
  }

   /**
   * Get authorizedPerson
   * @return authorizedPerson
  **/
  @javax.annotation.Nullable
  public Object getAuthorizedPerson() {
    return authorizedPerson;
  }


  public void setAuthorizedPerson(Object authorizedPerson) {
    this.authorizedPerson = authorizedPerson;
  }


  public Numberports desiredDueDate(Object desiredDueDate) {
    
    this.desiredDueDate = desiredDueDate;
    return this;
  }

   /**
   * Get desiredDueDate
   * @return desiredDueDate
  **/
  @javax.annotation.Nullable
  public Object getDesiredDueDate() {
    return desiredDueDate;
  }


  public void setDesiredDueDate(Object desiredDueDate) {
    this.desiredDueDate = desiredDueDate;
  }


  public Numberports accountNumber(Object accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  public Object getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(Object accountNumber) {
    this.accountNumber = accountNumber;
  }


  public Numberports accountPhoneNumber(Object accountPhoneNumber) {
    
    this.accountPhoneNumber = accountPhoneNumber;
    return this;
  }

   /**
   * Get accountPhoneNumber
   * @return accountPhoneNumber
  **/
  @javax.annotation.Nullable
  public Object getAccountPhoneNumber() {
    return accountPhoneNumber;
  }


  public void setAccountPhoneNumber(Object accountPhoneNumber) {
    this.accountPhoneNumber = accountPhoneNumber;
  }


  public Numberports office(Object office) {
    
    this.office = office;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return office
  **/
  @javax.annotation.Nullable
  public Object getOffice() {
    return office;
  }


  public void setOffice(Object office) {
    this.office = office;
  }


  public Numberports e911(Object e911) {
    
    this.e911 = e911;
    return this;
  }

   /**
   * Get e911
   * @return e911
  **/
  @javax.annotation.Nullable
  public Object getE911() {
    return e911;
  }


  public void setE911(Object e911) {
    this.e911 = e911;
  }


  public Numberports invoice(Object invoice) {
    
    this.invoice = invoice;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return invoice
  **/
  @javax.annotation.Nullable
  public Object getInvoice() {
    return invoice;
  }


  public void setInvoice(Object invoice) {
    this.invoice = invoice;
  }


  public Numberports status(Object status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public Object getStatus() {
    return status;
  }


  public void setStatus(Object status) {
    this.status = status;
  }


  public Numberports destinationType(Object destinationType) {
    
    this.destinationType = destinationType;
    return this;
  }

   /**
   * Get destinationType
   * @return destinationType
  **/
  @javax.annotation.Nullable
  public Object getDestinationType() {
    return destinationType;
  }


  public void setDestinationType(Object destinationType) {
    this.destinationType = destinationType;
  }


  public Numberports destination(Object destination) {
    
    this.destination = destination;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return destination
  **/
  @javax.annotation.Nullable
  public Object getDestination() {
    return destination;
  }


  public void setDestination(Object destination) {
    this.destination = destination;
  }


  public Numberports ref(Object ref) {
    
    this.ref = ref;
    return this;
  }

   /**
   * Get ref
   * @return ref
  **/
  @javax.annotation.Nullable
  public Object getRef() {
    return ref;
  }


  public void setRef(Object ref) {
    this.ref = ref;
  }


  public Numberports callForwardingDestination(Object callForwardingDestination) {
    
    this.callForwardingDestination = callForwardingDestination;
    return this;
  }

   /**
   * Get callForwardingDestination
   * @return callForwardingDestination
  **/
  @javax.annotation.Nullable
  public Object getCallForwardingDestination() {
    return callForwardingDestination;
  }


  public void setCallForwardingDestination(Object callForwardingDestination) {
    this.callForwardingDestination = callForwardingDestination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Numberports numberports = (Numberports) o;
    return Objects.equals(this.name, numberports.name) &&
        Objects.equals(this.type, numberports.type) &&
        Objects.equals(this.typeOfService, numberports.typeOfService) &&
        Objects.equals(this.authorizedPerson, numberports.authorizedPerson) &&
        Objects.equals(this.desiredDueDate, numberports.desiredDueDate) &&
        Objects.equals(this.accountNumber, numberports.accountNumber) &&
        Objects.equals(this.accountPhoneNumber, numberports.accountPhoneNumber) &&
        Objects.equals(this.office, numberports.office) &&
        Objects.equals(this.e911, numberports.e911) &&
        Objects.equals(this.invoice, numberports.invoice) &&
        Objects.equals(this.status, numberports.status) &&
        Objects.equals(this.destinationType, numberports.destinationType) &&
        Objects.equals(this.destination, numberports.destination) &&
        Objects.equals(this.ref, numberports.ref) &&
        Objects.equals(this.callForwardingDestination, numberports.callForwardingDestination);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, typeOfService, authorizedPerson, desiredDueDate, accountNumber, accountPhoneNumber, office, e911, invoice, status, destinationType, destination, ref, callForwardingDestination);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Numberports {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeOfService: ").append(toIndentedString(typeOfService)).append("\n");
    sb.append("    authorizedPerson: ").append(toIndentedString(authorizedPerson)).append("\n");
    sb.append("    desiredDueDate: ").append(toIndentedString(desiredDueDate)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    accountPhoneNumber: ").append(toIndentedString(accountPhoneNumber)).append("\n");
    sb.append("    office: ").append(toIndentedString(office)).append("\n");
    sb.append("    e911: ").append(toIndentedString(e911)).append("\n");
    sb.append("    invoice: ").append(toIndentedString(invoice)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    destinationType: ").append(toIndentedString(destinationType)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    callForwardingDestination: ").append(toIndentedString(callForwardingDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("typeOfService");
    openapiFields.add("authorizedPerson");
    openapiFields.add("desiredDueDate");
    openapiFields.add("accountNumber");
    openapiFields.add("accountPhoneNumber");
    openapiFields.add("office");
    openapiFields.add("e911");
    openapiFields.add("invoice");
    openapiFields.add("status");
    openapiFields.add("destinationType");
    openapiFields.add("destination");
    openapiFields.add("ref");
    openapiFields.add("callForwardingDestination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("typeOfService");
    openapiRequiredFields.add("authorizedPerson");
    openapiRequiredFields.add("desiredDueDate");
    openapiRequiredFields.add("accountNumber");
    openapiRequiredFields.add("accountPhoneNumber");
    openapiRequiredFields.add("office");
    openapiRequiredFields.add("invoice");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("destinationType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Numberports
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Numberports.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Numberports is not found in the empty JSON string", Numberports.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Numberports.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Numberports` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Numberports.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Numberports.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Numberports' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Numberports> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Numberports.class));

       return (TypeAdapter<T>) new TypeAdapter<Numberports>() {
           @Override
           public void write(JsonWriter out, Numberports value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Numberports read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Numberports given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Numberports
  * @throws IOException if the JSON string is invalid with respect to Numberports
  */
  public static Numberports fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Numberports.class);
  }

 /**
  * Convert an instance of Numberports to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

