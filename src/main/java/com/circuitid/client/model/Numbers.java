/*
 * Circuit ID REST API
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.19
 * Contact: support@circuitid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.circuitid.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.circuitid.client.JSON;

/**
 * Numbers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-29T10:03:54.608Z[UTC]")
public class Numbers {
  /**
   * Gets or Sets inUse
   */
  @JsonAdapter(InUseEnum.Adapter.class)
  public enum InUseEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    InUseEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InUseEnum fromValue(Integer value) {
      for (InUseEnum b : InUseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InUseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InUseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InUseEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return InUseEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IN_USE = "inUse";
  @SerializedName(SERIALIZED_NAME_IN_USE)
  private InUseEnum inUse = InUseEnum.NUMBER_1;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_PER_MINUTE_RATE = "perMinuteRate";
  @SerializedName(SERIALIZED_NAME_PER_MINUTE_RATE)
  private Integer perMinuteRate;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_ORIGINAL_PROVIDER = "originalProvider";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_PROVIDER)
  private String originalProvider;

  public static final String SERIALIZED_NAME_PROVIDER_ORDER_ID = "providerOrderId";
  @SerializedName(SERIALIZED_NAME_PROVIDER_ORDER_ID)
  private String providerOrderId;

  /**
   * Gets or Sets fax
   */
  @JsonAdapter(FaxEnum.Adapter.class)
  public enum FaxEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    FaxEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FaxEnum fromValue(Integer value) {
      for (FaxEnum b : FaxEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FaxEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FaxEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FaxEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return FaxEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FAX = "fax";
  @SerializedName(SERIALIZED_NAME_FAX)
  private FaxEnum fax = FaxEnum.NUMBER_0;

  /**
   * Gets or Sets voice
   */
  @JsonAdapter(VoiceEnum.Adapter.class)
  public enum VoiceEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    VoiceEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VoiceEnum fromValue(Integer value) {
      for (VoiceEnum b : VoiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VoiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VoiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VoiceEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return VoiceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VOICE = "voice";
  @SerializedName(SERIALIZED_NAME_VOICE)
  private VoiceEnum voice = VoiceEnum.NUMBER_0;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status = StatusEnum.NUMBER_1;

  /**
   * Gets or Sets sms
   */
  @JsonAdapter(SmsEnum.Adapter.class)
  public enum SmsEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    SmsEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SmsEnum fromValue(Integer value) {
      for (SmsEnum b : SmsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SmsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SmsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SmsEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return SmsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SMS = "sms";
  @SerializedName(SERIALIZED_NAME_SMS)
  private SmsEnum sms = SmsEnum.NUMBER_0;

  /**
   * Gets or Sets mms
   */
  @JsonAdapter(MmsEnum.Adapter.class)
  public enum MmsEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    MmsEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MmsEnum fromValue(Integer value) {
      for (MmsEnum b : MmsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MmsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MmsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MmsEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MmsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MMS = "mms";
  @SerializedName(SERIALIZED_NAME_MMS)
  private MmsEnum mms = MmsEnum.NUMBER_0;

  public static final String SERIALIZED_NAME_CHANGE_REGION_ORDER_ID = "changeRegionOrderId";
  @SerializedName(SERIALIZED_NAME_CHANGE_REGION_ORDER_ID)
  private String changeRegionOrderId;

  public static final String SERIALIZED_NAME_CHANGE_REGION_ORDER_DATE = "changeRegionOrderDate";
  @SerializedName(SERIALIZED_NAME_CHANGE_REGION_ORDER_DATE)
  private OffsetDateTime changeRegionOrderDate;

  public static final String SERIALIZED_NAME_DIRECTORY_LISTING = "directoryListing";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_LISTING)
  private String directoryListing;

  public static final String SERIALIZED_NAME_DIRECTORY_LISTING_ORDER_ID = "directoryListingOrderId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_LISTING_ORDER_ID)
  private String directoryListingOrderId;

  public static final String SERIALIZED_NAME_DIRECTORY_LISTING_ORDER_DATE = "directoryListingOrderDate";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_LISTING_ORDER_DATE)
  private OffsetDateTime directoryListingOrderDate;

  public static final String SERIALIZED_NAME_CALLER_NAME = "callerName";
  @SerializedName(SERIALIZED_NAME_CALLER_NAME)
  private String callerName;

  public static final String SERIALIZED_NAME_CALLER_NAME_ORDER_ID = "callerNameOrderId";
  @SerializedName(SERIALIZED_NAME_CALLER_NAME_ORDER_ID)
  private String callerNameOrderId;

  public static final String SERIALIZED_NAME_CALLER_NAME_ORDER_DATE = "callerNameOrderDate";
  @SerializedName(SERIALIZED_NAME_CALLER_NAME_ORDER_DATE)
  private OffsetDateTime callerNameOrderDate;

  public static final String SERIALIZED_NAME_E911 = "e911";
  @SerializedName(SERIALIZED_NAME_E911)
  private String e911;

  public static final String SERIALIZED_NAME_E911_ORDER_ID = "e911OrderId";
  @SerializedName(SERIALIZED_NAME_E911_ORDER_ID)
  private String e911OrderId;

  public static final String SERIALIZED_NAME_E911_ORDER_DATE = "e911OrderDate";
  @SerializedName(SERIALIZED_NAME_E911_ORDER_DATE)
  private OffsetDateTime e911OrderDate;

  public static final String SERIALIZED_NAME_MESSAGE_CAMPAIGN = "messageCampaign";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CAMPAIGN)
  private String messageCampaign;

  /**
   * Gets or Sets messageClass
   */
  @JsonAdapter(MessageClassEnum.Adapter.class)
  public enum MessageClassEnum {
    P2P("P2P"),
    
    A2PLC("A2PLC"),
    
    A2P8XX("A2P8XX");

    private String value;

    MessageClassEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageClassEnum fromValue(String value) {
      for (MessageClassEnum b : MessageClassEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageClassEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageClassEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageClassEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageClassEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_CLASS = "messageClass";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CLASS)
  private MessageClassEnum messageClass;

  /**
   * Gets or Sets messageType
   */
  @JsonAdapter(MessageTypeEnum.Adapter.class)
  public enum MessageTypeEnum {
    SMS("SMS"),
    
    MMS("MMS"),
    
    SMSMMS("SMSMMS"),
    
    SMS_ALT("SMS_ALT"),
    
    MMS_ALT("MMS_ALT"),
    
    SMSMMS_ALT("SMSMMS_ALT");

    private String value;

    MessageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageTypeEnum fromValue(String value) {
      for (MessageTypeEnum b : MessageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "messageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private MessageTypeEnum messageType;

  public static final String SERIALIZED_NAME_MESSAGE_CAMPAIGN_ORDER_ID = "messageCampaignOrderId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CAMPAIGN_ORDER_ID)
  private String messageCampaignOrderId;

  public static final String SERIALIZED_NAME_MESSAGE_CAMPAIGN_ORDER_DATE = "messageCampaignOrderDate";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CAMPAIGN_ORDER_DATE)
  private OffsetDateTime messageCampaignOrderDate;

  /**
   * Gets or Sets e911Supported
   */
  @JsonAdapter(E911SupportedEnum.Adapter.class)
  public enum E911SupportedEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    E911SupportedEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static E911SupportedEnum fromValue(Integer value) {
      for (E911SupportedEnum b : E911SupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<E911SupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final E911SupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public E911SupportedEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return E911SupportedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_E911_SUPPORTED = "e911Supported";
  @SerializedName(SERIALIZED_NAME_E911_SUPPORTED)
  private E911SupportedEnum e911Supported = E911SupportedEnum.NUMBER_0;

  /**
   * Gets or Sets callerNameSupported
   */
  @JsonAdapter(CallerNameSupportedEnum.Adapter.class)
  public enum CallerNameSupportedEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    CallerNameSupportedEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallerNameSupportedEnum fromValue(Integer value) {
      for (CallerNameSupportedEnum b : CallerNameSupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallerNameSupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallerNameSupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallerNameSupportedEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return CallerNameSupportedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CALLER_NAME_SUPPORTED = "callerNameSupported";
  @SerializedName(SERIALIZED_NAME_CALLER_NAME_SUPPORTED)
  private CallerNameSupportedEnum callerNameSupported = CallerNameSupportedEnum.NUMBER_0;

  /**
   * Gets or Sets directoryListingSupported
   */
  @JsonAdapter(DirectoryListingSupportedEnum.Adapter.class)
  public enum DirectoryListingSupportedEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    DirectoryListingSupportedEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DirectoryListingSupportedEnum fromValue(Integer value) {
      for (DirectoryListingSupportedEnum b : DirectoryListingSupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DirectoryListingSupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DirectoryListingSupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DirectoryListingSupportedEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return DirectoryListingSupportedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DIRECTORY_LISTING_SUPPORTED = "directoryListingSupported";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_LISTING_SUPPORTED)
  private DirectoryListingSupportedEnum directoryListingSupported = DirectoryListingSupportedEnum.NUMBER_0;

  /**
   * Gets or Sets messagingSupported
   */
  @JsonAdapter(MessagingSupportedEnum.Adapter.class)
  public enum MessagingSupportedEnum {
    NUMBER_1(1),
    
    NUMBER_0(0);

    private Integer value;

    MessagingSupportedEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessagingSupportedEnum fromValue(Integer value) {
      for (MessagingSupportedEnum b : MessagingSupportedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessagingSupportedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessagingSupportedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessagingSupportedEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return MessagingSupportedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MESSAGING_SUPPORTED = "messagingSupported";
  @SerializedName(SERIALIZED_NAME_MESSAGING_SUPPORTED)
  private MessagingSupportedEnum messagingSupported = MessagingSupportedEnum.NUMBER_0;

  /**
   * Gets or Sets destinationType
   */
  @JsonAdapter(DestinationTypeEnum.Adapter.class)
  public enum DestinationTypeEnum {
    ANNOUNCEMENTS("announcements"),
    
    DIRECTORIES("directories"),
    
    PARK("park"),
    
    NUMBERS("numbers"),
    
    MENUS("menus"),
    
    USERS("users"),
    
    SERVERS("servers"),
    
    INBOUNDRULES("inboundrules"),
    
    CALLQUEUES("callqueues"),
    
    FAXACCOUNTS("faxaccounts"),
    
    CALLFORWARDING("callforwarding"),
    
    HANGUP("hangup"),
    
    PHONEINBOUNDRULES("phoneinboundrules"),
    
    VOICEMAILACCOUNTS("voicemailaccounts");

    private String value;

    DestinationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DestinationTypeEnum fromValue(String value) {
      for (DestinationTypeEnum b : DestinationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DestinationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DestinationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DestinationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DestinationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DESTINATION_TYPE = "destinationType";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPE)
  private DestinationTypeEnum destinationType = DestinationTypeEnum.PARK;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private String destination;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_CALL_FORWARDING_DESTINATION = "callForwardingDestination";
  @SerializedName(SERIALIZED_NAME_CALL_FORWARDING_DESTINATION)
  private String callForwardingDestination;

  public Numbers() {
  }

  public Numbers inUse(InUseEnum inUse) {
    
    this.inUse = inUse;
    return this;
  }

   /**
   * Get inUse
   * @return inUse
  **/
  @javax.annotation.Nullable
  public InUseEnum getInUse() {
    return inUse;
  }


  public void setInUse(InUseEnum inUse) {
    this.inUse = inUse;
  }


  public Numbers name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Numbers countryCode(String countryCode) {
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public Numbers amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public Numbers perMinuteRate(Integer perMinuteRate) {
    
    this.perMinuteRate = perMinuteRate;
    return this;
  }

   /**
   * Get perMinuteRate
   * @return perMinuteRate
  **/
  @javax.annotation.Nullable
  public Integer getPerMinuteRate() {
    return perMinuteRate;
  }


  public void setPerMinuteRate(Integer perMinuteRate) {
    this.perMinuteRate = perMinuteRate;
  }


  public Numbers provider(String provider) {
    
    this.provider = provider;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return provider
  **/
  @javax.annotation.Nonnull
  public String getProvider() {
    return provider;
  }


  public void setProvider(String provider) {
    this.provider = provider;
  }


  public Numbers originalProvider(String originalProvider) {
    
    this.originalProvider = originalProvider;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return originalProvider
  **/
  @javax.annotation.Nullable
  public String getOriginalProvider() {
    return originalProvider;
  }


  public void setOriginalProvider(String originalProvider) {
    this.originalProvider = originalProvider;
  }


  public Numbers providerOrderId(String providerOrderId) {
    
    this.providerOrderId = providerOrderId;
    return this;
  }

   /**
   * Get providerOrderId
   * @return providerOrderId
  **/
  @javax.annotation.Nullable
  public String getProviderOrderId() {
    return providerOrderId;
  }


  public void setProviderOrderId(String providerOrderId) {
    this.providerOrderId = providerOrderId;
  }


  public Numbers fax(FaxEnum fax) {
    
    this.fax = fax;
    return this;
  }

   /**
   * Get fax
   * @return fax
  **/
  @javax.annotation.Nullable
  public FaxEnum getFax() {
    return fax;
  }


  public void setFax(FaxEnum fax) {
    this.fax = fax;
  }


  public Numbers voice(VoiceEnum voice) {
    
    this.voice = voice;
    return this;
  }

   /**
   * Get voice
   * @return voice
  **/
  @javax.annotation.Nullable
  public VoiceEnum getVoice() {
    return voice;
  }


  public void setVoice(VoiceEnum voice) {
    this.voice = voice;
  }


  public Numbers status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Numbers sms(SmsEnum sms) {
    
    this.sms = sms;
    return this;
  }

   /**
   * Get sms
   * @return sms
  **/
  @javax.annotation.Nullable
  public SmsEnum getSms() {
    return sms;
  }


  public void setSms(SmsEnum sms) {
    this.sms = sms;
  }


  public Numbers mms(MmsEnum mms) {
    
    this.mms = mms;
    return this;
  }

   /**
   * Get mms
   * @return mms
  **/
  @javax.annotation.Nullable
  public MmsEnum getMms() {
    return mms;
  }


  public void setMms(MmsEnum mms) {
    this.mms = mms;
  }


  public Numbers changeRegionOrderId(String changeRegionOrderId) {
    
    this.changeRegionOrderId = changeRegionOrderId;
    return this;
  }

   /**
   * Get changeRegionOrderId
   * @return changeRegionOrderId
  **/
  @javax.annotation.Nullable
  public String getChangeRegionOrderId() {
    return changeRegionOrderId;
  }


  public void setChangeRegionOrderId(String changeRegionOrderId) {
    this.changeRegionOrderId = changeRegionOrderId;
  }


  public Numbers changeRegionOrderDate(OffsetDateTime changeRegionOrderDate) {
    
    this.changeRegionOrderDate = changeRegionOrderDate;
    return this;
  }

   /**
   * Get changeRegionOrderDate
   * @return changeRegionOrderDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getChangeRegionOrderDate() {
    return changeRegionOrderDate;
  }


  public void setChangeRegionOrderDate(OffsetDateTime changeRegionOrderDate) {
    this.changeRegionOrderDate = changeRegionOrderDate;
  }


  public Numbers directoryListing(String directoryListing) {
    
    this.directoryListing = directoryListing;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return directoryListing
  **/
  @javax.annotation.Nullable
  public String getDirectoryListing() {
    return directoryListing;
  }


  public void setDirectoryListing(String directoryListing) {
    this.directoryListing = directoryListing;
  }


  public Numbers directoryListingOrderId(String directoryListingOrderId) {
    
    this.directoryListingOrderId = directoryListingOrderId;
    return this;
  }

   /**
   * Get directoryListingOrderId
   * @return directoryListingOrderId
  **/
  @javax.annotation.Nullable
  public String getDirectoryListingOrderId() {
    return directoryListingOrderId;
  }


  public void setDirectoryListingOrderId(String directoryListingOrderId) {
    this.directoryListingOrderId = directoryListingOrderId;
  }


  public Numbers directoryListingOrderDate(OffsetDateTime directoryListingOrderDate) {
    
    this.directoryListingOrderDate = directoryListingOrderDate;
    return this;
  }

   /**
   * Get directoryListingOrderDate
   * @return directoryListingOrderDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDirectoryListingOrderDate() {
    return directoryListingOrderDate;
  }


  public void setDirectoryListingOrderDate(OffsetDateTime directoryListingOrderDate) {
    this.directoryListingOrderDate = directoryListingOrderDate;
  }


  public Numbers callerName(String callerName) {
    
    this.callerName = callerName;
    return this;
  }

   /**
   * Get callerName
   * @return callerName
  **/
  @javax.annotation.Nullable
  public String getCallerName() {
    return callerName;
  }


  public void setCallerName(String callerName) {
    this.callerName = callerName;
  }


  public Numbers callerNameOrderId(String callerNameOrderId) {
    
    this.callerNameOrderId = callerNameOrderId;
    return this;
  }

   /**
   * Get callerNameOrderId
   * @return callerNameOrderId
  **/
  @javax.annotation.Nullable
  public String getCallerNameOrderId() {
    return callerNameOrderId;
  }


  public void setCallerNameOrderId(String callerNameOrderId) {
    this.callerNameOrderId = callerNameOrderId;
  }


  public Numbers callerNameOrderDate(OffsetDateTime callerNameOrderDate) {
    
    this.callerNameOrderDate = callerNameOrderDate;
    return this;
  }

   /**
   * Get callerNameOrderDate
   * @return callerNameOrderDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCallerNameOrderDate() {
    return callerNameOrderDate;
  }


  public void setCallerNameOrderDate(OffsetDateTime callerNameOrderDate) {
    this.callerNameOrderDate = callerNameOrderDate;
  }


  public Numbers e911(String e911) {
    
    this.e911 = e911;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return e911
  **/
  @javax.annotation.Nullable
  public String getE911() {
    return e911;
  }


  public void setE911(String e911) {
    this.e911 = e911;
  }


  public Numbers e911OrderId(String e911OrderId) {
    
    this.e911OrderId = e911OrderId;
    return this;
  }

   /**
   * Get e911OrderId
   * @return e911OrderId
  **/
  @javax.annotation.Nullable
  public String getE911OrderId() {
    return e911OrderId;
  }


  public void setE911OrderId(String e911OrderId) {
    this.e911OrderId = e911OrderId;
  }


  public Numbers e911OrderDate(OffsetDateTime e911OrderDate) {
    
    this.e911OrderDate = e911OrderDate;
    return this;
  }

   /**
   * Get e911OrderDate
   * @return e911OrderDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getE911OrderDate() {
    return e911OrderDate;
  }


  public void setE911OrderDate(OffsetDateTime e911OrderDate) {
    this.e911OrderDate = e911OrderDate;
  }


  public Numbers messageCampaign(String messageCampaign) {
    
    this.messageCampaign = messageCampaign;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return messageCampaign
  **/
  @javax.annotation.Nullable
  public String getMessageCampaign() {
    return messageCampaign;
  }


  public void setMessageCampaign(String messageCampaign) {
    this.messageCampaign = messageCampaign;
  }


  public Numbers messageClass(MessageClassEnum messageClass) {
    
    this.messageClass = messageClass;
    return this;
  }

   /**
   * Get messageClass
   * @return messageClass
  **/
  @javax.annotation.Nullable
  public MessageClassEnum getMessageClass() {
    return messageClass;
  }


  public void setMessageClass(MessageClassEnum messageClass) {
    this.messageClass = messageClass;
  }


  public Numbers messageType(MessageTypeEnum messageType) {
    
    this.messageType = messageType;
    return this;
  }

   /**
   * Get messageType
   * @return messageType
  **/
  @javax.annotation.Nullable
  public MessageTypeEnum getMessageType() {
    return messageType;
  }


  public void setMessageType(MessageTypeEnum messageType) {
    this.messageType = messageType;
  }


  public Numbers messageCampaignOrderId(String messageCampaignOrderId) {
    
    this.messageCampaignOrderId = messageCampaignOrderId;
    return this;
  }

   /**
   * Get messageCampaignOrderId
   * @return messageCampaignOrderId
  **/
  @javax.annotation.Nullable
  public String getMessageCampaignOrderId() {
    return messageCampaignOrderId;
  }


  public void setMessageCampaignOrderId(String messageCampaignOrderId) {
    this.messageCampaignOrderId = messageCampaignOrderId;
  }


  public Numbers messageCampaignOrderDate(OffsetDateTime messageCampaignOrderDate) {
    
    this.messageCampaignOrderDate = messageCampaignOrderDate;
    return this;
  }

   /**
   * Get messageCampaignOrderDate
   * @return messageCampaignOrderDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getMessageCampaignOrderDate() {
    return messageCampaignOrderDate;
  }


  public void setMessageCampaignOrderDate(OffsetDateTime messageCampaignOrderDate) {
    this.messageCampaignOrderDate = messageCampaignOrderDate;
  }


  public Numbers e911Supported(E911SupportedEnum e911Supported) {
    
    this.e911Supported = e911Supported;
    return this;
  }

   /**
   * Get e911Supported
   * @return e911Supported
  **/
  @javax.annotation.Nullable
  public E911SupportedEnum getE911Supported() {
    return e911Supported;
  }


  public void setE911Supported(E911SupportedEnum e911Supported) {
    this.e911Supported = e911Supported;
  }


  public Numbers callerNameSupported(CallerNameSupportedEnum callerNameSupported) {
    
    this.callerNameSupported = callerNameSupported;
    return this;
  }

   /**
   * Get callerNameSupported
   * @return callerNameSupported
  **/
  @javax.annotation.Nullable
  public CallerNameSupportedEnum getCallerNameSupported() {
    return callerNameSupported;
  }


  public void setCallerNameSupported(CallerNameSupportedEnum callerNameSupported) {
    this.callerNameSupported = callerNameSupported;
  }


  public Numbers directoryListingSupported(DirectoryListingSupportedEnum directoryListingSupported) {
    
    this.directoryListingSupported = directoryListingSupported;
    return this;
  }

   /**
   * Get directoryListingSupported
   * @return directoryListingSupported
  **/
  @javax.annotation.Nullable
  public DirectoryListingSupportedEnum getDirectoryListingSupported() {
    return directoryListingSupported;
  }


  public void setDirectoryListingSupported(DirectoryListingSupportedEnum directoryListingSupported) {
    this.directoryListingSupported = directoryListingSupported;
  }


  public Numbers messagingSupported(MessagingSupportedEnum messagingSupported) {
    
    this.messagingSupported = messagingSupported;
    return this;
  }

   /**
   * Get messagingSupported
   * @return messagingSupported
  **/
  @javax.annotation.Nullable
  public MessagingSupportedEnum getMessagingSupported() {
    return messagingSupported;
  }


  public void setMessagingSupported(MessagingSupportedEnum messagingSupported) {
    this.messagingSupported = messagingSupported;
  }


  public Numbers destinationType(DestinationTypeEnum destinationType) {
    
    this.destinationType = destinationType;
    return this;
  }

   /**
   * Get destinationType
   * @return destinationType
  **/
  @javax.annotation.Nonnull
  public DestinationTypeEnum getDestinationType() {
    return destinationType;
  }


  public void setDestinationType(DestinationTypeEnum destinationType) {
    this.destinationType = destinationType;
  }


  public Numbers destination(String destination) {
    
    this.destination = destination;
    return this;
  }

   /**
   * ObjectId (unique 12 bytes ID)
   * @return destination
  **/
  @javax.annotation.Nullable
  public String getDestination() {
    return destination;
  }


  public void setDestination(String destination) {
    this.destination = destination;
  }


  public Numbers ref(String ref) {
    
    this.ref = ref;
    return this;
  }

   /**
   * Get ref
   * @return ref
  **/
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }


  public void setRef(String ref) {
    this.ref = ref;
  }


  public Numbers callForwardingDestination(String callForwardingDestination) {
    
    this.callForwardingDestination = callForwardingDestination;
    return this;
  }

   /**
   * Get callForwardingDestination
   * @return callForwardingDestination
  **/
  @javax.annotation.Nullable
  public String getCallForwardingDestination() {
    return callForwardingDestination;
  }


  public void setCallForwardingDestination(String callForwardingDestination) {
    this.callForwardingDestination = callForwardingDestination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Numbers numbers = (Numbers) o;
    return Objects.equals(this.inUse, numbers.inUse) &&
        Objects.equals(this.name, numbers.name) &&
        Objects.equals(this.countryCode, numbers.countryCode) &&
        Objects.equals(this.amount, numbers.amount) &&
        Objects.equals(this.perMinuteRate, numbers.perMinuteRate) &&
        Objects.equals(this.provider, numbers.provider) &&
        Objects.equals(this.originalProvider, numbers.originalProvider) &&
        Objects.equals(this.providerOrderId, numbers.providerOrderId) &&
        Objects.equals(this.fax, numbers.fax) &&
        Objects.equals(this.voice, numbers.voice) &&
        Objects.equals(this.status, numbers.status) &&
        Objects.equals(this.sms, numbers.sms) &&
        Objects.equals(this.mms, numbers.mms) &&
        Objects.equals(this.changeRegionOrderId, numbers.changeRegionOrderId) &&
        Objects.equals(this.changeRegionOrderDate, numbers.changeRegionOrderDate) &&
        Objects.equals(this.directoryListing, numbers.directoryListing) &&
        Objects.equals(this.directoryListingOrderId, numbers.directoryListingOrderId) &&
        Objects.equals(this.directoryListingOrderDate, numbers.directoryListingOrderDate) &&
        Objects.equals(this.callerName, numbers.callerName) &&
        Objects.equals(this.callerNameOrderId, numbers.callerNameOrderId) &&
        Objects.equals(this.callerNameOrderDate, numbers.callerNameOrderDate) &&
        Objects.equals(this.e911, numbers.e911) &&
        Objects.equals(this.e911OrderId, numbers.e911OrderId) &&
        Objects.equals(this.e911OrderDate, numbers.e911OrderDate) &&
        Objects.equals(this.messageCampaign, numbers.messageCampaign) &&
        Objects.equals(this.messageClass, numbers.messageClass) &&
        Objects.equals(this.messageType, numbers.messageType) &&
        Objects.equals(this.messageCampaignOrderId, numbers.messageCampaignOrderId) &&
        Objects.equals(this.messageCampaignOrderDate, numbers.messageCampaignOrderDate) &&
        Objects.equals(this.e911Supported, numbers.e911Supported) &&
        Objects.equals(this.callerNameSupported, numbers.callerNameSupported) &&
        Objects.equals(this.directoryListingSupported, numbers.directoryListingSupported) &&
        Objects.equals(this.messagingSupported, numbers.messagingSupported) &&
        Objects.equals(this.destinationType, numbers.destinationType) &&
        Objects.equals(this.destination, numbers.destination) &&
        Objects.equals(this.ref, numbers.ref) &&
        Objects.equals(this.callForwardingDestination, numbers.callForwardingDestination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inUse, name, countryCode, amount, perMinuteRate, provider, originalProvider, providerOrderId, fax, voice, status, sms, mms, changeRegionOrderId, changeRegionOrderDate, directoryListing, directoryListingOrderId, directoryListingOrderDate, callerName, callerNameOrderId, callerNameOrderDate, e911, e911OrderId, e911OrderDate, messageCampaign, messageClass, messageType, messageCampaignOrderId, messageCampaignOrderDate, e911Supported, callerNameSupported, directoryListingSupported, messagingSupported, destinationType, destination, ref, callForwardingDestination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Numbers {\n");
    sb.append("    inUse: ").append(toIndentedString(inUse)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    perMinuteRate: ").append(toIndentedString(perMinuteRate)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    originalProvider: ").append(toIndentedString(originalProvider)).append("\n");
    sb.append("    providerOrderId: ").append(toIndentedString(providerOrderId)).append("\n");
    sb.append("    fax: ").append(toIndentedString(fax)).append("\n");
    sb.append("    voice: ").append(toIndentedString(voice)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    sms: ").append(toIndentedString(sms)).append("\n");
    sb.append("    mms: ").append(toIndentedString(mms)).append("\n");
    sb.append("    changeRegionOrderId: ").append(toIndentedString(changeRegionOrderId)).append("\n");
    sb.append("    changeRegionOrderDate: ").append(toIndentedString(changeRegionOrderDate)).append("\n");
    sb.append("    directoryListing: ").append(toIndentedString(directoryListing)).append("\n");
    sb.append("    directoryListingOrderId: ").append(toIndentedString(directoryListingOrderId)).append("\n");
    sb.append("    directoryListingOrderDate: ").append(toIndentedString(directoryListingOrderDate)).append("\n");
    sb.append("    callerName: ").append(toIndentedString(callerName)).append("\n");
    sb.append("    callerNameOrderId: ").append(toIndentedString(callerNameOrderId)).append("\n");
    sb.append("    callerNameOrderDate: ").append(toIndentedString(callerNameOrderDate)).append("\n");
    sb.append("    e911: ").append(toIndentedString(e911)).append("\n");
    sb.append("    e911OrderId: ").append(toIndentedString(e911OrderId)).append("\n");
    sb.append("    e911OrderDate: ").append(toIndentedString(e911OrderDate)).append("\n");
    sb.append("    messageCampaign: ").append(toIndentedString(messageCampaign)).append("\n");
    sb.append("    messageClass: ").append(toIndentedString(messageClass)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    messageCampaignOrderId: ").append(toIndentedString(messageCampaignOrderId)).append("\n");
    sb.append("    messageCampaignOrderDate: ").append(toIndentedString(messageCampaignOrderDate)).append("\n");
    sb.append("    e911Supported: ").append(toIndentedString(e911Supported)).append("\n");
    sb.append("    callerNameSupported: ").append(toIndentedString(callerNameSupported)).append("\n");
    sb.append("    directoryListingSupported: ").append(toIndentedString(directoryListingSupported)).append("\n");
    sb.append("    messagingSupported: ").append(toIndentedString(messagingSupported)).append("\n");
    sb.append("    destinationType: ").append(toIndentedString(destinationType)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    callForwardingDestination: ").append(toIndentedString(callForwardingDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inUse");
    openapiFields.add("name");
    openapiFields.add("countryCode");
    openapiFields.add("amount");
    openapiFields.add("perMinuteRate");
    openapiFields.add("provider");
    openapiFields.add("originalProvider");
    openapiFields.add("providerOrderId");
    openapiFields.add("fax");
    openapiFields.add("voice");
    openapiFields.add("status");
    openapiFields.add("sms");
    openapiFields.add("mms");
    openapiFields.add("changeRegionOrderId");
    openapiFields.add("changeRegionOrderDate");
    openapiFields.add("directoryListing");
    openapiFields.add("directoryListingOrderId");
    openapiFields.add("directoryListingOrderDate");
    openapiFields.add("callerName");
    openapiFields.add("callerNameOrderId");
    openapiFields.add("callerNameOrderDate");
    openapiFields.add("e911");
    openapiFields.add("e911OrderId");
    openapiFields.add("e911OrderDate");
    openapiFields.add("messageCampaign");
    openapiFields.add("messageClass");
    openapiFields.add("messageType");
    openapiFields.add("messageCampaignOrderId");
    openapiFields.add("messageCampaignOrderDate");
    openapiFields.add("e911Supported");
    openapiFields.add("callerNameSupported");
    openapiFields.add("directoryListingSupported");
    openapiFields.add("messagingSupported");
    openapiFields.add("destinationType");
    openapiFields.add("destination");
    openapiFields.add("ref");
    openapiFields.add("callForwardingDestination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("countryCode");
    openapiRequiredFields.add("provider");
    openapiRequiredFields.add("destinationType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Numbers
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Numbers.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Numbers is not found in the empty JSON string", Numbers.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Numbers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Numbers` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Numbers.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (!jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("originalProvider") != null && !jsonObj.get("originalProvider").isJsonNull()) && !jsonObj.get("originalProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalProvider").toString()));
      }
      if ((jsonObj.get("providerOrderId") != null && !jsonObj.get("providerOrderId").isJsonNull()) && !jsonObj.get("providerOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerOrderId").toString()));
      }
      if ((jsonObj.get("changeRegionOrderId") != null && !jsonObj.get("changeRegionOrderId").isJsonNull()) && !jsonObj.get("changeRegionOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeRegionOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeRegionOrderId").toString()));
      }
      if ((jsonObj.get("directoryListing") != null && !jsonObj.get("directoryListing").isJsonNull()) && !jsonObj.get("directoryListing").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directoryListing` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directoryListing").toString()));
      }
      if ((jsonObj.get("directoryListingOrderId") != null && !jsonObj.get("directoryListingOrderId").isJsonNull()) && !jsonObj.get("directoryListingOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directoryListingOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directoryListingOrderId").toString()));
      }
      if ((jsonObj.get("callerName") != null && !jsonObj.get("callerName").isJsonNull()) && !jsonObj.get("callerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerName").toString()));
      }
      if ((jsonObj.get("callerNameOrderId") != null && !jsonObj.get("callerNameOrderId").isJsonNull()) && !jsonObj.get("callerNameOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerNameOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerNameOrderId").toString()));
      }
      if ((jsonObj.get("e911") != null && !jsonObj.get("e911").isJsonNull()) && !jsonObj.get("e911").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `e911` to be a primitive type in the JSON string but got `%s`", jsonObj.get("e911").toString()));
      }
      if ((jsonObj.get("e911OrderId") != null && !jsonObj.get("e911OrderId").isJsonNull()) && !jsonObj.get("e911OrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `e911OrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("e911OrderId").toString()));
      }
      if ((jsonObj.get("messageCampaign") != null && !jsonObj.get("messageCampaign").isJsonNull()) && !jsonObj.get("messageCampaign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageCampaign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageCampaign").toString()));
      }
      if ((jsonObj.get("messageClass") != null && !jsonObj.get("messageClass").isJsonNull()) && !jsonObj.get("messageClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageClass").toString()));
      }
      if ((jsonObj.get("messageType") != null && !jsonObj.get("messageType").isJsonNull()) && !jsonObj.get("messageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageType").toString()));
      }
      if ((jsonObj.get("messageCampaignOrderId") != null && !jsonObj.get("messageCampaignOrderId").isJsonNull()) && !jsonObj.get("messageCampaignOrderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageCampaignOrderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageCampaignOrderId").toString()));
      }
      if (!jsonObj.get("destinationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationType").toString()));
      }
      if ((jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) && !jsonObj.get("destination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      if ((jsonObj.get("callForwardingDestination") != null && !jsonObj.get("callForwardingDestination").isJsonNull()) && !jsonObj.get("callForwardingDestination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callForwardingDestination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callForwardingDestination").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Numbers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Numbers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Numbers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Numbers.class));

       return (TypeAdapter<T>) new TypeAdapter<Numbers>() {
           @Override
           public void write(JsonWriter out, Numbers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Numbers read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Numbers given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Numbers
  * @throws IOException if the JSON string is invalid with respect to Numbers
  */
  public static Numbers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Numbers.class);
  }

 /**
  * Convert an instance of Numbers to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

