/*
 * Circuit ID REST API
 * # Introduction Circuit ID&reg; is an innovative cloud communications platform that redefines your connectivity experience. Our cutting-edge AI-powered solution seamlessly integrates calling, meetings, messaging, voicemail, fax, SIP Trunking, mobile broadband, and mobile phone services, accessible wherever you and your devices go.                  Whether you are a beginner getting started with our API or an experienced developer looking for advanced features, this documentation site will serve as your comprehensive guide.   We are excited to have you on board and are confident that this documentation site will empower you to leverage the full potential of our REST API.  If you have any questions or require further assistance, please don't hesitate to reach out to our support team.                  Happy coding!
 *
 * The version of the OpenAPI document: 0.47.17
 * Contact: support@circuitid.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.circuitid.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.circuitid.client.JSON;

/**
 * Timeschedules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-07-25T10:32:07.025Z[UTC]")
public class Timeschedules {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private Object name = null;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private Object timezone = America/New_York;

  public static final String SERIALIZED_NAME_SUNDAY = "sunday";
  @SerializedName(SERIALIZED_NAME_SUNDAY)
  private Object sunday = {schedules=[{start=12:00 AM, end=12:00 AM}]};

  public static final String SERIALIZED_NAME_MONDAY = "monday";
  @SerializedName(SERIALIZED_NAME_MONDAY)
  private Object monday = {schedules=[{start=12:00 AM, end=12:00 AM}]};

  public static final String SERIALIZED_NAME_TUESDAY = "tuesday";
  @SerializedName(SERIALIZED_NAME_TUESDAY)
  private Object tuesday = {schedules=[{start=12:00 AM, end=12:00 AM}]};

  public static final String SERIALIZED_NAME_WEDNESDAY = "wednesday";
  @SerializedName(SERIALIZED_NAME_WEDNESDAY)
  private Object wednesday = {schedules=[{start=12:00 AM, end=12:00 AM}]};

  public static final String SERIALIZED_NAME_THURSDAY = "thursday";
  @SerializedName(SERIALIZED_NAME_THURSDAY)
  private Object thursday = {schedules=[{start=12:00 AM, end=12:00 AM}]};

  public static final String SERIALIZED_NAME_FRIDAY = "friday";
  @SerializedName(SERIALIZED_NAME_FRIDAY)
  private Object friday = {schedules=[{start=12:00 AM, end=12:00 AM}]};

  public static final String SERIALIZED_NAME_SATURDAY = "saturday";
  @SerializedName(SERIALIZED_NAME_SATURDAY)
  private Object saturday = {schedules=[{start=12:00 AM, end=12:00 AM}]};

  public Timeschedules() {
  }

  public Timeschedules name(Object name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public Object getName() {
    return name;
  }


  public void setName(Object name) {
    this.name = name;
  }


  public Timeschedules timezone(Object timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @javax.annotation.Nullable
  public Object getTimezone() {
    return timezone;
  }


  public void setTimezone(Object timezone) {
    this.timezone = timezone;
  }


  public Timeschedules sunday(Object sunday) {
    
    this.sunday = sunday;
    return this;
  }

   /**
   * Get sunday
   * @return sunday
  **/
  @javax.annotation.Nullable
  public Object getSunday() {
    return sunday;
  }


  public void setSunday(Object sunday) {
    this.sunday = sunday;
  }


  public Timeschedules monday(Object monday) {
    
    this.monday = monday;
    return this;
  }

   /**
   * Get monday
   * @return monday
  **/
  @javax.annotation.Nullable
  public Object getMonday() {
    return monday;
  }


  public void setMonday(Object monday) {
    this.monday = monday;
  }


  public Timeschedules tuesday(Object tuesday) {
    
    this.tuesday = tuesday;
    return this;
  }

   /**
   * Get tuesday
   * @return tuesday
  **/
  @javax.annotation.Nullable
  public Object getTuesday() {
    return tuesday;
  }


  public void setTuesday(Object tuesday) {
    this.tuesday = tuesday;
  }


  public Timeschedules wednesday(Object wednesday) {
    
    this.wednesday = wednesday;
    return this;
  }

   /**
   * Get wednesday
   * @return wednesday
  **/
  @javax.annotation.Nullable
  public Object getWednesday() {
    return wednesday;
  }


  public void setWednesday(Object wednesday) {
    this.wednesday = wednesday;
  }


  public Timeschedules thursday(Object thursday) {
    
    this.thursday = thursday;
    return this;
  }

   /**
   * Get thursday
   * @return thursday
  **/
  @javax.annotation.Nullable
  public Object getThursday() {
    return thursday;
  }


  public void setThursday(Object thursday) {
    this.thursday = thursday;
  }


  public Timeschedules friday(Object friday) {
    
    this.friday = friday;
    return this;
  }

   /**
   * Get friday
   * @return friday
  **/
  @javax.annotation.Nullable
  public Object getFriday() {
    return friday;
  }


  public void setFriday(Object friday) {
    this.friday = friday;
  }


  public Timeschedules saturday(Object saturday) {
    
    this.saturday = saturday;
    return this;
  }

   /**
   * Get saturday
   * @return saturday
  **/
  @javax.annotation.Nullable
  public Object getSaturday() {
    return saturday;
  }


  public void setSaturday(Object saturday) {
    this.saturday = saturday;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Timeschedules timeschedules = (Timeschedules) o;
    return Objects.equals(this.name, timeschedules.name) &&
        Objects.equals(this.timezone, timeschedules.timezone) &&
        Objects.equals(this.sunday, timeschedules.sunday) &&
        Objects.equals(this.monday, timeschedules.monday) &&
        Objects.equals(this.tuesday, timeschedules.tuesday) &&
        Objects.equals(this.wednesday, timeschedules.wednesday) &&
        Objects.equals(this.thursday, timeschedules.thursday) &&
        Objects.equals(this.friday, timeschedules.friday) &&
        Objects.equals(this.saturday, timeschedules.saturday);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, timezone, sunday, monday, tuesday, wednesday, thursday, friday, saturday);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Timeschedules {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    sunday: ").append(toIndentedString(sunday)).append("\n");
    sb.append("    monday: ").append(toIndentedString(monday)).append("\n");
    sb.append("    tuesday: ").append(toIndentedString(tuesday)).append("\n");
    sb.append("    wednesday: ").append(toIndentedString(wednesday)).append("\n");
    sb.append("    thursday: ").append(toIndentedString(thursday)).append("\n");
    sb.append("    friday: ").append(toIndentedString(friday)).append("\n");
    sb.append("    saturday: ").append(toIndentedString(saturday)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("timezone");
    openapiFields.add("sunday");
    openapiFields.add("monday");
    openapiFields.add("tuesday");
    openapiFields.add("wednesday");
    openapiFields.add("thursday");
    openapiFields.add("friday");
    openapiFields.add("saturday");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("timezone");
    openapiRequiredFields.add("sunday");
    openapiRequiredFields.add("monday");
    openapiRequiredFields.add("tuesday");
    openapiRequiredFields.add("wednesday");
    openapiRequiredFields.add("thursday");
    openapiRequiredFields.add("friday");
    openapiRequiredFields.add("saturday");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Timeschedules
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Timeschedules.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Timeschedules is not found in the empty JSON string", Timeschedules.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Timeschedules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Timeschedules` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Timeschedules.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Timeschedules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Timeschedules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Timeschedules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Timeschedules.class));

       return (TypeAdapter<T>) new TypeAdapter<Timeschedules>() {
           @Override
           public void write(JsonWriter out, Timeschedules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Timeschedules read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Timeschedules given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Timeschedules
  * @throws IOException if the JSON string is invalid with respect to Timeschedules
  */
  public static Timeschedules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Timeschedules.class);
  }

 /**
  * Convert an instance of Timeschedules to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

